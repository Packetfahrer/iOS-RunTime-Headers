/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CoreMotion.framework/CoreMotion
 */

@interface CMWakeGestureManager : NSObject {
    int  _crown;
    <CMWakeGestureDelegate> * _delegate;
    int  _wrist;
    int  fCurrentState;
    bool  fEnableAudioAlert;
    double  fLastNotificationTime;
    int  fNightStandThreshold;
    NSObject<OS_dispatch_queue> * fPrivateQueue;
    int  fScreenDimmingNotificationToken;
    struct Dispatcher { int (**x1)(); id x2; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x3; void*x4; void*x5; void*x6; void*x7; void*x8; void*x9; void*x10; SEL x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; unsigned short x18; void*x19; short x20; void*x21; void*x22; void*x23; void*x24; unsigned long x25; int x26; unsigned int x27/* : ? */; const void*x28; const void*x29; void*x30; void*x31; const int x32; void x33; void*x34; void*x35; void*x36; void*x37; const void*x38; void*x39; void*x40; void*x41; out const void*x42; short x43; void*x44; void*x45; void*x46; int x47; long x48; unsigned short x49; void*x50; const void x51; int x52; BOOL x53; void*x54; short x55; void*x56; float x57; const void*x58; void*x59; void*x60; void*x61; out const void*x62; void*x63; void*x64; void*x65; int x66; long x67; unsigned short x68; void*x69; const void x70; int x71; BOOL x72; void*x73; short x74; void*x75; void*x76; void*x77; void*x78; void*x79; void*x80; void*x81; void*x82; void*x83; void*x84; void*x85; void*x86; void*x87; void*x88; void*x89; void*x90; void*x91; void*x92; void*x93; void*x94; void*x95; void*x96; void*x97; void*x98; void*x99; void*x100; void*x101; void*x102; void*x103; void*x104; void*x105; void*x106; void*x107; void*x108; void*x109; void*x110; void*x111; SEL x112; void*x113; void*x114; void*x115; void*x116; void*x117; void*x118; void*x119; unsigned short x120; unsigned long long x121; void*x122; void*x123; const void*x124; void*x125; void*x126; short x127; void*x128; void*x129; void*x130; void*x131; void*x132; void*x133; void*x134; void*x135; void*x136; void*x137; void*x138; void*x139; void*x140; void*x141; void*x142; void*x143; void*x144; void*x145; void*x146; void*x147; char *x148; void*x149; void*x150; unsigned int x151; void*x152; unsigned short x153; long doublex154; unsigned int x155; void*x156; void*x157; void*x158; void*x159; unsigned long x160; void*x161; void*x162; void*x163; const void*x164; void*x165; void*x166; void*x167; void*x168; void*x169; void*x170; void*x171; void*x172; void*x173; void*x174; void*x175; void*x176; void*x177; void*x178; Class x179; void*x180; void*x181; bycopy void*x182; long doublex183; unsigned short x184; void*x185; void*x186; const BOOL x187; void*x188; void*x189; int x190; void*x191; long x192; double x193; void*x194; long x195; void*x196; BOOL x197; void*x198; void*x199; out long x200; double x201; void*x202; const void*x203; void*x204; const void*x205; void*x206; void*x207; void*x208; void*x209; const short x210; void*x211; void*x212; void*x213; void*x214; void*x215; void*x216; void*x217; void*x218; void*x219; void*x220; void*x221; void*x222; unsigned short x223; unsigned short x224; void*x225; void*x226; const BOOL x227; void*x228; void*x229; void*x230; short x231; void*x232; long x233; void*x234; short x235; unsigned char x236; out in void*x237; const out long x238; long x239; void*x240; const void*x241; void*x242; void*x243; void*x244; void*x245; void*x246; void*x247; void*x248; void*x249; void*x250; void*x251; void*x252; void*x253; void*x254; void*x255; void*x256; void*x257; void*x258; void*x259; void*x260; struct x261; void*x262; void*x263; unsigned int x264; void*x265; long x266; void*x267; void*x268; void*x269; void*x270; const void*x271; void*x272; in void*x273; unsigned short x274; in void*x275; void*x276; bool x277; void*x278; void*x279; void*x280; void x281; int x282; out const void*x283; void*x284; void*x285; void*x286; void*x287; void*x288; void*x289; void*x290; void*x291; void*x292; void*x293; void*x294; void*x295; void*x296; void*x297; void*x298; void*x299; void*x300; void*x301; void*x302; void*x303; void*x304; void*x305; unsigned short x306; void*x307; long x308; void*x309; void*x310; unsigned int x311; in float x312; out void*x313; void*x314; long long x315; void*x316; void*x317; short x318; void*x319; void*x320; void*x321; void*x322; void*x323; void*x324; void*x325; void*x326; void*x327; void*x328; void*x329; void*x330; void*x331; void*x332; void*x333; void*x334; void*x335; void*x336; unsigned short x337; void*x338; void*x339; void*x340; unsigned char x341; out void*x342; void*x343; void*x344; in double x345; void*x346; void x347; void*x348; in void*x349; void*x350; void*x351; void*x352; void*x353; void*x354; void*x355; void*x356; void*x357; void*x358; void*x359; void*x360; void*x361; void*x362; void*x363; void*x364; inout void*x365; void*x366; void*x367; void*x368; int x369; const void*x370; double x371; long doublex372; void*x373; void x374; int x375; BOOL x376; void*x377; unsigned int x378; in float x379; out void*x380; void*x381; void*x382; void*x383; void*x384; void*x385; void*x386; void*x387; void*x388; void*x389; void*x390; void*x391; void*x392; unsigned int x393; void*x394; const void*x395; void*x396; void*x397; void*x398; int x399; void*x400; void*x401; void*x402; int x403; out in void*x404; void*x405; void*x406; void*x407; void*x408; void*x409; void*x410; void*x411; void*x412; void*x413; void*x414; void*x415; void*x416; void*x417; void*x418; void*x419; void*x420; unsigned long x421; out BOOL x422; void*x423; long x424; unsigned short x425; void*x426; void*x427; const BOOL x428; void*x429; void*x430; void*x431; void x432; int x433; void*x434; void*x435; void*x436; void*x437; void*x438; void*x439; void*x440; void*x441; void*x442; void*x443; in void*x444; void*x445; long long x446; void*x447; void*x448; unsigned int x449; long doublex450; void*x451; void*x452; void*x453; BOOL x454; void*x455; out const void*x456; void*x457; void*x458; void*x459; void*x460; void*x461; void*x462; void*x463; void*x464; void*x465; void*x466; void*x467; void*x468; void*x469; void*x470; void*x471; void*x472; void*x473; } * fWakeDispatcher;
    struct unique_ptr<CMWakeGestureVisitor, std::__1::default_delete<CMWakeGestureVisitor> > { 
        struct __compressed_pair<CMWakeGestureVisitor *, std::__1::default_delete<CMWakeGestureVisitor> > { 
            struct CMWakeGestureVisitor {} *__first_; 
        } __ptr_; 
    }  fWakeGestureVisitor;
}

@property (nonatomic) int crown;
@property (nonatomic) <CMWakeGestureDelegate> *delegate;
@property (nonatomic) int wrist;

+ (void)initialize;
+ (BOOL)isWakeGestureAvailable;
+ (id)sharedManager;

- (id).cxx_construct;
- (void).cxx_destruct;
- (int)crown;
- (void)dealloc;
- (id)delegate;
- (id)init;
- (void)onWakeUpdated:(const struct CLGestureReport { union { unsigned char x_1_1_1; struct Ping { unsigned char x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; struct GestureState { unsigned char x_3_2_1; int x_3_2_2; unsigned char x_3_2_3; unsigned char x_3_2_4; } x_1_1_3; struct Simulate { unsigned char x_4_2_1; unsigned long long x_4_2_2; unsigned long long x_4_2_3; } x_1_1_4; struct ControlMode { unsigned char x_5_2_1; unsigned char x_5_2_2; unsigned char x_5_2_3; unsigned char x_5_2_4; } x_1_1_5; } x1; }*)arg1;
- (void)playAlert;
- (void)setCrown:(int)arg1;
- (void)setDelegate:(id)arg1;
- (BOOL)setNightStandMode:(BOOL)arg1 withConfiguration:(int)arg2;
- (void)setWrist:(int)arg1;
- (BOOL)simulateGestureWithDelay:(double)arg1 Duration:(double)arg2;
- (void)startWakeGestureUpdates;
- (void)stopWakeGestureUpdates;
- (void)updateWristAndCrown;
- (int)wrist;

@end
