/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@interface UILabel : UIView <ABText, MPUAutoupdatingTextContainer, NSCoding, _UIMultilineTextContentSizing> {
    BOOL  __textColorFollowsTintColor;
    id  _content;
    NSMutableDictionary * _defaultAttributes;
    float  _firstLineBaseline;
    UIColor * _highlightedColor;
    float  _lastLineBaseline;
    id  _layout;
    int  _lineSpacing;
    int  _measuredNumberOfLines;
    float  _minimumFontSize;
    float  _minimumScaleFactor;
    int  _numberOfLines;
    float  _preferredMaxLayoutWidth;
    float  _previousBaselineOffsetFromBottom;
    float  _previousFirstLineBaseline;
    _UILabelScaledMetrics * _scaledMetrics;
    struct CGSize { 
        float width; 
        float height; 
    }  _size;
    NSAttributedString * _synthesizedAttributedText;
    struct { 
        unsigned int unused1 : 3; 
        unsigned int highlighted : 1; 
        unsigned int autosizeTextToFit : 1; 
        unsigned int autotrackTextToFit : 1; 
        unsigned int baselineAdjustment : 2; 
        unsigned int enabled : 1; 
        unsigned int wordRoundingEnabled : 1; 
        unsigned int explicitAlignment : 1; 
        unsigned int marqueeEnabled : 1; 
        unsigned int marqueeRunable : 1; 
        unsigned int marqueeRequired : 1; 
        unsigned int drawsLetterpress : 1; 
        unsigned int unused3 : 1; 
        unsigned int usesExplicitPreferredMaxLayoutWidth : 1; 
        unsigned int determiningPreferredMaxLayoutWidth : 1; 
        unsigned int inSecondConstraintsPass : 1; 
        unsigned int drawsDebugBaselines : 1; 
        unsigned int explicitBaselineOffset : 1; 
        unsigned int usesSimpleTextEffects : 1; 
        unsigned int isComplexString : 1; 
        unsigned int isVariableLengthString : 1; 
        unsigned int wantsUnderlineForAccessibilityButtonShapesEnabled : 1; 
    }  _textLabelFlags;
}

@property (setter=MPU_setAutomaticallyUpdatesTextStyleFontsToPreferredTextStyleFonts:, nonatomic) BOOL MPU_automaticallyUpdatesTextStyleFontsToPreferredTextStyleFonts;
@property (nonatomic, readonly) MPUTextContainerContentSizeUpdater *MPU_contentSizeUpdater;
@property (nonatomic, readonly) float _capOffsetFromBoundsTop;
@property (setter=_setDrawsDebugBaselines:, nonatomic) BOOL _drawsDebugBaselines;
@property (setter=_setFirstLineBaselineFrameOriginY:, nonatomic) float _firstLineBaselineFrameOriginY;
@property (nonatomic, readonly) float _firstLineBaselineOffsetFromBoundsTop;
@property (setter=_setFirstLineCapFrameOriginY:, nonatomic) float _firstLineCapFrameOriginY;
@property (nonatomic, readonly) float _lastLineBaseline;
@property (setter=_setLastLineBaselineFrameOriginY:, nonatomic) float _lastLineBaselineFrameOriginY;
@property (getter=_synthesizedAttributedText, setter=_setSynthesizedAttributedText:, nonatomic, retain) NSAttributedString *_synthesizedAttributedText;
@property (setter=_setTextColorFollowsTintColor:, nonatomic) BOOL _textColorFollowsTintColor;
@property (setter=_setWantsUnderlineForAccessibilityButtonShapesEnabled:, nonatomic) BOOL _wantsUnderlineForAccessibilityButtonShapesEnabled;
@property (nonatomic, copy) NSString *ab_text;
@property (nonatomic, copy) NSDictionary *ab_textAttributes;
@property (nonatomic) BOOL adjustsFontSizeToFitWidth;
@property (nonatomic) BOOL adjustsLetterSpacingToFitWidth;
@property (nonatomic) BOOL allowsDefaultTighteningForTruncation;
@property (nonatomic, copy) NSAttributedString *attributedText;
@property (nonatomic) int baselineAdjustment;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (getter=isEnabled, nonatomic) BOOL enabled;
@property (nonatomic, retain) UIFont *font;
@property (readonly) unsigned int hash;
@property (getter=isHighlighted, nonatomic) BOOL highlighted;
@property (nonatomic, retain) UIColor *highlightedTextColor;
@property (nonatomic) int lineBreakMode;
@property (nonatomic) int lineSpacing;
@property (nonatomic) float minimumFontSize;
@property (nonatomic) float minimumScaleFactor;
@property (nonatomic, readonly) float naui_baselineOffsetFromBottom;
@property (nonatomic, readonly) float naui_capOffsetFromTop;
@property (nonatomic) int numberOfLines;
@property (nonatomic) float preferredMaxLayoutWidth;
@property (nonatomic, readonly) float rc_baselineOffsetFromBottom;
@property (nonatomic, readonly) float rc_capOffsetFromTop;
@property (nonatomic, retain) UIColor *shadowColor;
@property (nonatomic) struct CGSize { float x1; float x2; } shadowOffset;
@property (readonly) Class superclass;
@property (nonatomic, copy) NSString *text;
@property (nonatomic) int textAlignment;
@property (nonatomic, retain) UIColor *textColor;
@property (getter=isUserInteractionEnabled, nonatomic) BOOL userInteractionEnabled;

// Image: /System/Library/Frameworks/UIKit.framework/UIKit

+ (id)_defaultAttributes;
+ (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_insetRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 forAttributedString:(id)arg2 withDefaultFont:(id)arg3 inView:(id)arg4;
+ (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })_insetsForAttributedString:(id)arg1 withDefaultFont:(id)arg2 inView:(id)arg3;
+ (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })_insetsForString:(id)arg1 withFont:(id)arg2 inView:(id)arg3;
+ (struct CGSize { float x1; float x2; })_legacy_adjustSizeForWebKitConstraining:(struct CGSize { float x1; float x2; })arg1 withFont:(id)arg2;
+ (struct __CFCharacterSet { }*)_tooBigChars;
+ (id)defaultFont;
+ (Class)layerClass;

- (void).cxx_destruct;
- (void)_accessibilityButtonShapesChangedNotification:(id)arg1;
- (void)_accessibilityButtonShapesParametersDidChange;
- (float)_actualScaleFactor;
- (id)_associatedScalingLabel;
- (BOOL)_attributedStringHasAttributesNotCoveredByPrimitives;
- (float)_baselineOffsetFromBottom;
- (void)_baselineOffsetParametersDidChange;
- (float)_capOffsetFromBoundsTop;
- (void)_commonInit;
- (id)_compatibilityAttributedString;
- (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })_contentInsetsFromFonts;
- (void)_coordinateBeginTimeForMarqueeAnimations:(double)arg1;
- (id)_defaultAttributes;
- (void)_didChangeFromIdiom:(int)arg1 onScreen:(id)arg2 traverseHierarchy:(BOOL)arg3;
- (void)_didMoveFromWindow:(id)arg1 toWindow:(id)arg2;
- (id)_disabledFontColor;
- (void)_drawFullMarqueeTextInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)_drawTextInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 baselineCalculationOnly:(BOOL)arg2;
- (BOOL)_drawsDebugBaselines;
- (BOOL)_drawsUnderline;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_ensureBaselineMetricsReturningBounds;
- (float)_firstBaselineOffsetFromTop;
- (float)_firstLineBaselineFrameOriginY;
- (float)_firstLineBaselineOffsetFromBoundsTop;
- (float)_firstLineCapFrameOriginY;
- (id)_image;
- (struct CGSize { float x1; float x2; })_intrinsicSizeWithinSize:(struct CGSize { float x1; float x2; })arg1;
- (void)_invalidateAsNeededForNewSize:(struct CGSize { float x1; float x2; })arg1 oldSize:(struct CGSize { float x1; float x2; })arg2 withLinkCheck:(BOOL)arg3;
- (void)_invalidateDefaultAttributes;
- (void)_invalidateLayout;
- (void)_invalidateSynthesizedAttributedTextAndLayout;
- (void)_invalidateTextSize;
- (BOOL)_isTextFieldCenteredLabel;
- (float)_lastLineBaseline;
- (float)_lastLineBaselineFrameOriginY;
- (id)_layoutDebuggingTitle;
- (float)_maximumMarqueeTextWidth;
- (int)_measuredNumberOfLines;
- (float)_minimumFontSize;
- (BOOL)_needsDoubleUpdateConstraintsPass;
- (float)_preferredMaxLayoutWidth;
- (void)_prepareForFirstIntrinsicContentSizeCalculation;
- (void)_prepareForSecondIntrinsicContentSizeCalculationWithLayoutEngineBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)_resetToBeginningOfDoublePass;
- (void)_resetUsesExplicitPreferredMaxLayoutWidth;
- (id)_scriptingInfo;
- (void)_setAllowsDefaultTighteningForTruncation:(BOOL)arg1;
- (void)_setAttributedText:(id)arg1 andTakeOwnership:(BOOL)arg2;
- (void)_setColor:(id)arg1;
- (void)_setDefaultAttributes:(id)arg1;
- (void)_setDrawsDebugBaselines:(BOOL)arg1;
- (void)_setFirstLineBaselineFrameOriginY:(float)arg1;
- (void)_setFirstLineCapFrameOriginY:(float)arg1;
- (void)_setFont:(id)arg1;
- (void)_setInSecondConstraintsPass:(BOOL)arg1;
- (void)_setLastLineBaselineFrameOriginY:(float)arg1;
- (void)_setLineBreakMode:(int)arg1;
- (void)_setMinimumFontSize:(float)arg1;
- (void)_setShadow:(id)arg1;
- (void)_setShadowUIOffset:(struct UIOffset { float x1; float x2; })arg1;
- (void)_setSynthesizedAttributedText:(id)arg1;
- (void)_setText:(id)arg1;
- (void)_setTextAlignment:(int)arg1;
- (void)_setTextColor:(id)arg1;
- (void)_setTextColorFollowsTintColor:(BOOL)arg1;
- (void)_setUsesSimpleTextEffects:(BOOL)arg1;
- (void)_setWantsUnderlineForAccessibilityButtonShapesEnabled:(BOOL)arg1;
- (void)_setWordRoundingEnabled:(BOOL)arg1;
- (id)_shadow;
- (BOOL)_shouldCeilSizeToViewScale;
- (BOOL)_shouldDrawUnderlinesLikeWebKit;
- (BOOL)_shouldShowAccessibilityButtonShapesUnderline;
- (id)_siblingMarqueeLabels;
- (void)_startMarquee;
- (void)_startMarqueeIfNecessary;
- (void)_stopMarqueeWithRedisplay:(BOOL)arg1;
- (id)_stringDrawingContext;
- (id)_synthesizedAttributedText;
- (id)_synthesizedTextAttributes;
- (BOOL)_textColorFollowsTintColor;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_textRectForBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 limitedToNumberOfLines:(int)arg2 includingShadow:(BOOL)arg3;
- (BOOL)_updateScaledMetricsForRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)_updateVariableLengthString;
- (BOOL)_usesSimpleTextEffects;
- (BOOL)_wantsUnderlineForAccessibilityButtonShapesEnabled;
- (BOOL)adjustsFontSizeToFitWidth;
- (BOOL)adjustsLetterSpacingToFitWidth;
- (BOOL)allowsDefaultTighteningForTruncation;
- (id)attributedText;
- (BOOL)autotrackTextToFit;
- (int)baselineAdjustment;
- (BOOL)centersHorizontally;
- (id)color;
- (id)currentTextColor;
- (void)dealloc;
- (unsigned long long)defaultAccessibilityTraits;
- (void)drawContentsInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)drawRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)drawTextInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (BOOL)drawsLetterpress;
- (BOOL)drawsUnderline;
- (void)encodeWithCoder:(id)arg1;
- (id)font;
- (id)highlightedTextColor;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (struct CGSize { float x1; float x2; })intrinsicContentSize;
- (void)invalidateIntrinsicContentSize;
- (BOOL)isAccessibilityElementByDefault;
- (BOOL)isElementAccessibilityExposedToInterfaceBuilder;
- (BOOL)isEnabled;
- (BOOL)isHighlighted;
- (id)letterpressStyle;
- (int)lineBreakMode;
- (int)lineSpacing;
- (BOOL)marqueeEnabled;
- (BOOL)marqueeRunning;
- (float)minimumFontSize;
- (float)minimumScaleFactor;
- (int)numberOfLines;
- (float)preferredMaxLayoutWidth;
- (struct CGSize { float x1; float x2; })rawSize;
- (void)setAdjustsFontSizeToFitWidth:(BOOL)arg1;
- (void)setAdjustsLetterSpacingToFitWidth:(BOOL)arg1;
- (void)setAllowsDefaultTighteningForTruncation:(BOOL)arg1;
- (void)setAttributedText:(id)arg1;
- (void)setAutotrackTextToFit:(BOOL)arg1;
- (void)setBaselineAdjustment:(int)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setCentersHorizontally:(BOOL)arg1;
- (void)setColor:(id)arg1;
- (void)setDrawsLetterpress:(BOOL)arg1;
- (void)setDrawsUnderline:(BOOL)arg1;
- (void)setEnabled:(BOOL)arg1;
- (void)setFont:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setHighlighted:(BOOL)arg1;
- (void)setHighlightedTextColor:(id)arg1;
- (void)setLetterpressStyle:(id)arg1;
- (void)setLineBreakMode:(int)arg1;
- (void)setLineSpacing:(int)arg1;
- (void)setMarqueeEnabled:(BOOL)arg1;
- (void)setMarqueeRunning:(BOOL)arg1;
- (void)setMinimumFontSize:(float)arg1;
- (void)setMinimumScaleFactor:(float)arg1;
- (void)setNumberOfLines:(int)arg1;
- (void)setPreferredMaxLayoutWidth:(float)arg1;
- (void)setRawSize:(struct CGSize { float x1; float x2; })arg1;
- (void)setSemanticContentAttribute:(int)arg1;
- (void)setShadowBlur:(float)arg1;
- (void)setShadowColor:(id)arg1;
- (void)setShadowOffset:(struct CGSize { float x1; float x2; })arg1;
- (void)setText:(id)arg1;
- (void)setTextAlignment:(int)arg1;
- (void)setTextColor:(id)arg1;
- (void)setUserInteractionEnabled:(BOOL)arg1;
- (float)shadowBlur;
- (id)shadowColor;
- (struct CGSize { float x1; float x2; })shadowOffset;
- (struct CGSize { float x1; float x2; })sizeThatFits:(struct CGSize { float x1; float x2; })arg1;
- (id)text;
- (int)textAlignment;
- (id)textColor;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })textRectForBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })textRectForBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 limitedToNumberOfLines:(int)arg2;
- (struct CGSize { float x1; float x2; })textSize;
- (struct CGSize { float x1; float x2; })textSizeForWidth:(float)arg1;
- (void)tintColorDidChange;
- (void)traitCollectionDidChange:(id)arg1;
- (void)updateConstraints;

// Image: /System/Library/Frameworks/ContactsUI.framework/ContactsUI

- (void)_cnui_applyContactStyle;
- (id)ab_text;
- (id)ab_textAttributes;
- (void)setAb_text:(id)arg1;
- (void)setAb_textAttributes:(id)arg1;

// Image: /System/Library/Frameworks/PassKit.framework/PassKit

- (void)pk_applyAppearance:(struct _PKAppearanceSpecifier { BOOL x1; id x2; id x3; id x4; id x5; id x6; id x7; id x8; id x9; id x10; id x11; id x12; id x13; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; SEL x22; void*x23; void*x24; void*x25; void*x26; void*x27; void*x28; long x29; int x30; short x31; void*x32; void*x33; const out BOOL x34; void*x35; short x36; short x37; out const void*x38; void*x39; void*x40; void*x41; void*x42; void*x43; void*x44; void*x45; void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; void*x52; long x53; void*x54; void*x55; void*x56; void*x57; void*x58; void*x59; void*x60; void*x61; void*x62; void*x63; void*x64; void*x65; void*x66; void*x67; void*x68; void*x69; void*x70; void*x71; void*x72; void*x73; void*x74; void*x75; void*x76; void*x77; void*x78; void*x79; void*x80; void*x81; SEL x82; void*x83; void*x84; void*x85; void*x86; void*x87; void*x88; unsigned short x89; void*x90; short x91; void*x92; void*x93; void*x94; void*x95; unsigned long x96; int x97; unsigned int x98/* : ? */; const void*x99; const void*x100; void*x101; void*x102; const void*x103; void*x104; void*x105; void*x106; out const void*x107; short x108; void*x109; void*x110; void*x111; out void*x112; out short x113; void*x114; unsigned int x115; void*x116; float x117; const void*x118; void*x119; void*x120; void*x121; out const void*x122; void*x123; void*x124; void*x125; out void*x126; out short x127; void*x128; unsigned int x129; void*x130; void*x131; void*x132; void*x133; void*x134; void* x135[ /* ? */ ]; void*x136; unsigned short x137; void*x138; short x139; void*x140; void*x141; void*x142; void*x143; unsigned long x144; int x145; unsigned int x146/* : ? */; const void*x147; const void*x148; void*x149; void*x150; const int x151; void x152; void*x153; void*x154; void*x155; void*x156; const void*x157; void*x158; void*x159; void*x160; out const void*x161; short x162; void*x163; unsigned short x164; void*x165; unsigned int x166/* : ? */; void*x167; void*x168; BOOL x169; void*x170; short x171; void*x172; float x173; const void*x174; void*x175; void*x176; void*x177; out const void*x178; void*x179; unsigned short x180; void*x181; unsigned int x182/* : ? */; void*x183; void*x184; BOOL x185; void*x186; short x187; void*x188; void*x189; void*x190; void*x191; void*x192; void*x193; void*x194; void*x195; void*x196; void*x197; void*x198; void*x199; void*x200; void*x201; short x202; void*x203; void*x204; void*x205; unsigned short x206; void*x207; short x208; void*x209; void*x210; void*x211; void*x212; unsigned long x213; int x214; unsigned int x215/* : ? */; const void*x216; const void*x217; void*x218; void*x219; const void*x220; void*x221; void*x222; void*x223; out const void*x224; short x225; void*x226; void*x227; void*x228; unsigned int x229/* : ? */; void*x230; int x231; void*x232; void*x233; float x234; const void*x235; void*x236; void*x237; void*x238; out const void*x239; void*x240; void*x241; void*x242; unsigned int x243/* : ? */; void*x244; int x245; void*x246; void*x247; void*x248; void*x249; void*x250; void*x251; void*x252; void*x253; void*x254; SEL x255; void*x256; void*x257; void*x258; void*x259; char *x260; long doublex261; unsigned int x262; in void*x263; void*x264; const short x265; void*x266; int x267; void*x268; int x269; void*x270; long x271; double x272; void*x273; const void*x274; short x275; void*x276; in void*x277; void*x278; void*x279; int x280; out in oneway int x281; void*x282; void*x283; unsigned char x284; out in void*x285; const out long x286; long x287; void*x288; const void*x289; void*x290; void*x291; void*x292; void*x293; void*x294; void*x295; void*x296; void*x297; void*x298; void*x299; void*x300; void*x301; void*x302; void*x303; void*x304; void*x305; void*x306; void*x307; short x308; void*x309; void*x310; unsigned long x311; unsigned int x312; in void*x313; long x314; int x315; void*x316; void*x317; void*x318; short x319; short x320; void*x321; void*x322; short x323; long x324; unsigned int x325/* : ? */; void*x326; void*x327; void*x328; void*x329; void*x330; void*x331; void*x332; void*x333; void*x334; oneway void*x335; void*x336; void*x337; void*x338; void*x339; unsigned char x340; void*x341; long x342; void*x343; in double x344; void*x345; const unsigned char x346; out void*x347; void*x348; out short x349; void*x350; void*x351; void*x352; BOOL x353; int x354; void*x355; int x356; void*x357; in void*x358; void*x359; void*x360; void*x361; void*x362; void*x363; void*x364; void*x365; void*x366; void*x367; void*x368; void*x369; void*x370; void*x371; void*x372; void*x373; void*x374; void*x375; void*x376; void*x377; void*x378; void*x379; void*x380; void*x381; bool x382; unsigned short x383; unsigned char x384; void*x385; void*x386; void*x387; void*x388; out const void*x389; unsigned long x390; out void*x391; void*x392; void*x393; const void*x394; void*x395; void*x396; void*x397; void*x398; void*x399; void*x400; void*x401; void*x402; void*x403; void*x404; void*x405; void*x406; void*x407; void*x408; void*x409; unsigned int x410; void*x411; bool x412; void*x413; void*x414; void*x415; long doublex416; int x417; short x418; void*x419; long x420; void*x421; void*x422; unsigned char x423; out in void*x424; void*x425; in void*x426; short x427; void*x428; void*x429; void*x430; void*x431; void*x432; void*x433; void*x434; long x435; void*x436; void*x437; void*x438; void*x439; void*x440; void*x441; in int x442; void*x443; short x444; unsigned short x445; void*x446; void*x447; void*x448; out in unsigned short x449; void*x450; BOOL x451; BOOL x452; void*x453; double x454; void*x455; double x456; void*x457; void*x458; void*x459; void*x460; void*x461; void*x462; void*x463; void*x464; void*x465; void*x466; void*x467; void*x468; void*x469; void*x470; void*x471; void*x472; void*x473; void*x474; void*x475; void*x476; void*x477; void*x478; void*x479; void*x480; void*x481; unsigned short x482; unsigned char x483; unsigned long x484; oneway int x485; double x486; void*x487; out void*x488; void*x489; void*x490; BOOL x491; void*x492; void*x493; void*x494; in void*x495; void*x496; const void*x497; void x498; int x499; void*x500; void*x501; oneway int x502; void*x503; void*x504; void*x505; void*x506; void*x507; void*x508; void*x509; void*x510; void*x511; void*x512; void*x513; void*x514; void*x515; void*x516; void*x517; Class x518; void*x519; void*x520; void*x521; void*x522; void*x523; unsigned short x524; bool x525; void*x526; const bool x527; void*x528; void*x529; void*x530; out in unsigned short x531; void*x532; int x533; in in void*x534; const oneway int x535; void*x536; void*x537; void*x538; void*x539; void*x540; void*x541; void*x542; void*x543; void*x544; }*)arg1;
- (id)pk_childrenForAppearance;
- (void)pk_setAttributedTextRespectingTextAndBackgroundColors:(id)arg1;
- (struct CGSize { float x1; float x2; })pkui_sizeThatFits:(struct CGSize { float x1; float x2; })arg1;
- (struct CGSize { float x1; float x2; })pkui_sizeThatFits:(struct CGSize { float x1; float x2; })arg1 forceWordWrap:(BOOL)arg2;

// Image: /System/Library/PrivateFrameworks/FuseUI.framework/FuseUI

- (void)transitionToTextColor:(id)arg1 duration:(double)arg2;

// Image: /System/Library/PrivateFrameworks/MPUFoundation.framework/MPUFoundation

- (BOOL)MPU_automaticallyUpdatesTextStyleFontsToPreferredTextStyleFonts;
- (void)MPU_configureWithTextAttributes:(id)arg1;
- (id)MPU_contentSizeUpdater;
- (void)MPU_setAutomaticallyUpdatesTextStyleFontsToPreferredTextStyleFonts:(BOOL)arg1;

// Image: /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI

- (int)_textAlignmentFromElementAlignment:(unsigned int)arg1;
- (void)configureForIKTextElement:(id)arg1 fontDescriptor:(id)arg2 textStyle:(id)arg3;
- (void)configureForIKTextElement:(id)arg1 fontDescriptor:(id)arg2 textStyle:(id)arg3 capitalize:(BOOL)arg4;

// Image: /System/Library/PrivateFrameworks/NetAppsUtilitiesUI.framework/NetAppsUtilitiesUI

- (float)naui_baselineOffsetFromBottom;
- (float)naui_capOffsetFromTop;
- (float)naui_distanceFromBaselineToCoordinate:(float)arg1 inView:(id)arg2;
- (void)naui_reloadDynamicFontWithTextStyleDescriptor:(id)arg1;

// Image: /System/Library/PrivateFrameworks/VoiceMemos.framework/VoiceMemos

+ (void)rc_transitionFromLabel:(id)arg1 toLabelWithText:(id)arg2 sizeNewLabelToFit:(BOOL)arg3 duration:(double)arg4 newLabelTransitionCompleteHandler:(id /* block */)arg5;

- (float)rc_baselineOffsetFromBottom;
- (float)rc_capOffsetFromTop;
- (float)rc_distanceFromBaselineToCoordinate:(float)arg1 inView:(id)arg2;

// Image: /System/Library/PrivateFrameworks/WeatherUI.framework/WeatherUI

- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })frameForBaseline:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setFrameOnBaseline:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;

@end
