/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKAnnotationMarkerLayer : NSObject {
    struct CGPoint { 
        float x; 
        float y; 
    }  _accumulatedCenterOffset;
    VKAnnotationMarker * _annotationMarker;
    struct CGPoint { 
        float x; 
        float y; 
    }  _centerOffset;
    float  _contentScale;
    BOOL  _hasMass;
    BOOL  _hasScreenRect;
    VKAnnotationModel * _model;
    struct { 
        double x0; 
        double x1; 
        double y0; 
        double y1; 
    }  _screenRect;
    int  _styleType;
    NSMutableArray * _sublayers;
    VKAnnotationMarkerLayer * _superlayer;
}

@property (nonatomic) struct CGPoint { float x1; float x2; } accumulatedCenterOffset;
@property (nonatomic) VKAnnotationMarker *annotationMarker;
@property (nonatomic) struct CGPoint { float x1; float x2; } centerOffset;
@property (nonatomic, readonly) float contentScale;
@property (nonatomic) BOOL hasMass;
@property (nonatomic, readonly) BOOL hasScreenRect;
@property (nonatomic) VKAnnotationModel *model;
@property (nonatomic) struct { double x1; double x2; double x3; double x4; } screenRect;
@property (nonatomic) int styleType;
@property (nonatomic, readonly, copy) NSArray *sublayers;
@property (nonatomic) VKAnnotationMarkerLayer *superlayer;

- (id)_styleAttributes;
- (void)_updateStyle;
- (unsigned char)_vectorType;
- (struct CGPoint { float x1; float x2; })accumulatedCenterOffset;
- (void)addSublayer:(id)arg1;
- (id)annotationMarker;
- (void)appendCommandsToBuffer:(struct CommandBuffer { int (**x1)(); char *x2; unsigned char x3; struct RenderQueue {} *x4; struct ClearItem {} *x5; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_6_1_1; struct RenderItem {} **x_6_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_7_1_1; struct Texture2DLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_8_1_1; struct BufferLoadItem {} *x_8_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_8_1_3; } x8; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_9_1_3; } x9; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned int x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_10_1_3; } x10; id x11; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; long x19; SEL x20; SEL x21; void*x22; void*x23; in double x24; void*x25; const void*x26; const void*x27; in short x28; void*x29; BOOL x30; void*x31; int x32; out in void*x33; void*x34; char *x35; void*x36; void*x37; void*x38; void*x39; struct x40; void*x41; char *x42; char *x43; void*x44; void*x45; void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; void*x52; short x53; void*x54; const void*x55; BOOL x56; void*x57; void*x58; short x59; void*x60; void*x61; const void*x62; double x63; void*x64; void*x65; void*x66; const void*x67; void*x68; void*x69; long x70; SEL x71; SEL x72; void*x73; void*x74; in double x75; void*x76; const void*x77; const void*x78; in short x79; void*x80; BOOL x81; void*x82; int x83; out in void*x84; void*x85; struct x86; void*x87; char *x88; char *x89; void*x90; void*x91; void*x92; void*x93; void*x94; void*x95; void*x96; void*x97; void*x98; short x99; void*x100; const void*x101; BOOL x102; void*x103; void*x104; short x105; void*x106; void*x107; const void*x108; double x109; void*x110; void*x111; void*x112; const void*x113; void*x114; void*x115; long x116; SEL x117; SEL x118; void*x119; void*x120; in double x121; void*x122; const void*x123; const void*x124; in short x125; void*x126; BOOL x127; void*x128; int x129; out in void*x130; void*x131; struct x132; void*x133; char *x134; char *x135; void*x136; void*x137; void*x138; void*x139; void*x140; void*x141; void*x142; void*x143; void*x144; short x145; void*x146; const void*x147; BOOL x148; void*x149; void*x150; void*x151; void*x152; BOOL x153; out void*x154; void*x155; const void*x156; short x157; short x158; void*x159; double x160; void*x161; void*x162; void*x163; int x164; const void*x165; short x166; void*x167; double x168; SEL x169; SEL x170; void*x171; void*x172; void*x173; SEL x174; SEL x175; short x176; void*x177; void*x178; const void*x179; double x180; void*x181; void*x182; void*x183; const void*x184; void*x185; void*x186; long x187; SEL x188; SEL x189; void*x190; void*x191; in double x192; void*x193; const void*x194; const void*x195; in short x196; void*x197; BOOL x198; void*x199; int x200; out in void*x201; void*x202; char *x203; char *x204; void*x205; void*x206; short x207; void*x208; double x209; SEL x210; SEL x211; void*x212; void*x213; void*x214; SEL x215; SEL x216; void*x217; long x218; long x219; out BOOL x220; void*x221; void*x222; out const void*x223; short x224; void*x225; double x226; SEL x227; SEL x228; void*x229; void*x230; void*x231; SEL x232; SEL x233; short x234; void*x235; void*x236; const void*x237; double x238; void*x239; void*x240; void*x241; const void*x242; void*x243; void*x244; long x245; SEL x246; SEL x247; void*x248; void*x249; in double x250; void*x251; const void*x252; const void*x253; in short x254; void*x255; BOOL x256; void*x257; int x258; out in void*x259; void*x260; char *x261; void*x262; void*x263; void*x264; void*x265; struct x266; void*x267; void*x268; void*x269; void*x270; void*x271; void*x272; void*x273; void*x274; void*x275; void*x276; }*)arg1 inContext:(id)arg2;
- (struct CGPoint { float x1; float x2; })centerOffset;
- (float)contentScale;
- (void)dealloc;
- (float)distanceFromPoint:(struct VKPoint { double x1; double x2; double x3; })arg1 canvasSize:(struct CGSize { float x1; float x2; })arg2;
- (BOOL)hasMass;
- (BOOL)hasScreenRect;
- (id)init;
- (void)insertSublayer:(id)arg1 aboveSublayer:(id)arg2;
- (void)insertSublayer:(id)arg1 belowSublayer:(id)arg2;
- (void)layoutWithContext:(id)arg1;
- (id)model;
- (void)removeFromSuperlayer;
- (void)removeSublayer:(id)arg1;
- (void)runAnimation:(id)arg1;
- (struct { double x1; double x2; double x3; double x4; })screenRect;
- (void)setAccumulatedCenterOffset:(struct CGPoint { float x1; float x2; })arg1;
- (void)setAnnotationMarker:(id)arg1;
- (void)setCenterOffset:(struct CGPoint { float x1; float x2; })arg1;
- (void)setHasMass:(BOOL)arg1;
- (void)setModel:(id)arg1;
- (void)setScreenRect:(struct { double x1; double x2; double x3; double x4; })arg1;
- (void)setStyleType:(int)arg1;
- (void)setSuperlayer:(id)arg1;
- (BOOL)shouldSnapToPixelsWithContext:(id)arg1;
- (int)styleType;
- (void)stylesheetDidChange;
- (id)sublayers;
- (id)superlayer;
- (void)updateWithContentScale:(float)arg1;
- (void)updateWithStyleQuery:(const struct shared_ptr<gss::StyleQuery> { struct StyleQuery {} *x1; struct __shared_weak_count {} *x2; }*)arg1;
- (void)willLayoutWithContext:(id)arg1;

@end
