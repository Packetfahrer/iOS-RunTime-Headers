/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKRealisticTile : VKVectorTile {
    float  _alpha;
    struct shared_ptr<ggl::RealisticCasingFacade::RealisticMesh> { 
        struct RealisticMesh {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _coastlineMesh;
    struct shared_ptr<ggl::Texture2D> { 
        struct Texture2D {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _defaultLandTexture;
    struct shared_ptr<ggl::Texture2D> { 
        struct Texture2D {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _defaultLandTextureVariant;
    struct FogInfo { 
        struct shared_ptr<ggl::ConstantDataTyped<ggl::Fog::Skyfog> > { 
            struct ConstantDataTyped<ggl::Fog::Skyfog> {} *__ptr_; 
            struct __shared_weak_count {} *__cntrl_; 
        } _fogConstantData; 
    }  _fogInfo;
    struct map<std::__1::basic_string<char>, unsigned long, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned long> > > { 
        struct __tree<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, unsigned long> > > { 
            struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> {} *__begin_node_; 
            struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> > > { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                    struct __tree_node_base<void *> {} *__left_; 
                } __first_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true> > { 
                unsigned long __first_; 
            } __pair3_; 
        } __tree_; 
    }  _landDrawableIndices;
    struct vector<std::__1::shared_ptr<md::TexturedDrawable>, std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable> > > { 
        struct shared_ptr<md::TexturedDrawable> {} *__begin_; 
        struct shared_ptr<md::TexturedDrawable> {} *__end_; 
        struct __compressed_pair<std::__1::shared_ptr<md::TexturedDrawable> *, std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable> > > { 
            struct shared_ptr<md::TexturedDrawable> {} *__first_; 
        } __end_cap_; 
    }  _landDrawables;
    VKRealisticPolygonMaker * _landPolygonMaker;
    struct shared_ptr<gss::StyleQuery> { 
        struct StyleQuery {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _landTextureStyleQuery;
    float  _landZ;
    float  _laneMarkingZ;
    struct vector<_VKRealisticPolygonMetaData, std::__1::allocator<_VKRealisticPolygonMetaData> > { 
        struct _VKRealisticPolygonMetaData {} *__begin_; 
        struct _VKRealisticPolygonMetaData {} *__end_; 
        struct __compressed_pair<_VKRealisticPolygonMetaData *, std::__1::allocator<_VKRealisticPolygonMetaData> > { 
            struct _VKRealisticPolygonMetaData {} *__first_; 
        } __end_cap_; 
    }  _polygonMetaData;
    NSMutableArray * _realisticRoadGroups;
    NSMapTable * _realisticRoadGroupsTable;
    struct shared_ptr<ggl::ConstantDataTyped<ggl::RealisticTexture::Realistic> > { 
        struct ConstantDataTyped<ggl::RealisticTexture::Realistic> {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _realisticTextureConstantData;
    float  _roadZ;
    BOOL  _shouldBlend;
    VKAnimation * _startDrawingAnimation;
    struct map<std::__1::basic_string<char>, unsigned long, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned long> > > { 
        struct __tree<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, unsigned long> > > { 
            struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> {} *__begin_node_; 
            struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> > > { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                    struct __tree_node_base<void *> {} *__left_; 
                } __first_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true> > { 
                unsigned long __first_; 
            } __pair3_; 
        } __tree_; 
    }  _waterDrawableIndices;
    struct vector<std::__1::shared_ptr<md::TexturedDrawable>, std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable> > > { 
        struct shared_ptr<md::TexturedDrawable> {} *__begin_; 
        struct shared_ptr<md::TexturedDrawable> {} *__end_; 
        struct __compressed_pair<std::__1::shared_ptr<md::TexturedDrawable> *, std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable> > > { 
            struct shared_ptr<md::TexturedDrawable> {} *__first_; 
        } __end_cap_; 
    }  _waterDrawables;
    VKRealisticPolygonMaker * _waterPolygonMaker;
    float  _waterZ;
}

@property (nonatomic) float alpha;
@property (nonatomic, readonly) struct RealisticMesh { int (**x1)(); char *x2; int (**x3)(); struct ResourceManager {} *x4; struct RenderResource {} *x5; struct MeshCReflection {} *x6; /* Warning: unhandled struct encoding: '{vector<std::__1::shared_ptr<ggl::VertexData>' */ struct x7; void*x8; void*x9; void*x10; void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; SEL x25; void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; long doublex32; long doublex33; void*x34; void*x35; void*x36; void*x37; const out void x38; void*x39; in void*x40; in BOOL x41; void*x42; void*x43; void*x44; in void*x45; void*x46; void*x47; const void*x48; void*x49; void*x50; void*x51; void*x52; void*x53; void*x54; void*x55; void*x56; void*x57; void*x58; void*x59; void*x60; void*x61; void*x62; void*x63; void*x64; void*x65; const void*x66; void*x67; void*x68; float x69; void*x70; void*x71; void*x72; void*x73; void*x74; void*x75; void*x76; void*x77; void*x78; void*x79; void*x80; void*x81; void*x82; void*x83; void*x84; void*x85; void*x86; void*x87; void*x88; void*x89; void*x90; void*x91; void*x92; void*x93; void*x94; void*x95; void*x96; const void*x97; void*x98; void*x99; void*x100; void*x101; void*x102; void*x103; void*x104; void*x105; void*x106; void*x107; void*x108; void*x109; void*x110; void*x111; void*x112; void*x113; void*x114; void*x115; void*x116; void*x117; void*x118; void*x119; void*x120; void*x121; void*x122; void*x123; void*x124; void*x125; void*x126; void*x127; void*x128; void*x129; unsigned short x130; void*x131; const void*x132; void*x133; void*x134; double x135; void*x136; void*x137; void*x138; void*x139; void*x140; void*x141; void*x142; void*x143; void*x144; void*x145; void*x146; void*x147; void*x148; void*x149; void*x150; void*x151; void*x152; void*x153; void*x154; void*x155; void*x156; void*x157; void*x158; void*x159; SEL x160; void*x161; void*x162; void*x163; void*x164; void*x165; void*x166; void*x167; void*x168; void*x169; void*x170; void*x171; void*x172; void*x173; void*x174; void*x175; void*x176; void*x177; void**x178; void*x179; void*x180; void*x181; void*x182; void*x183; void*x184; void*x185; void*x186; void*x187; void*x188; void*x189; void*x190; void*x191; void*x192; void*x193; const void*x194; void*x195; void*x196; void*x197; void*x198; void*x199; void*x200; void*x201; void*x202; void*x203; void*x204; void*x205; void*x206; void*x207; void*x208; void*x209; void*x210; void*x211; void*x212; void*x213; void*x214; void*x215; void*x216; void*x217; void*x218; void*x219; void*x220; void*x221; SEL x222; void*x223; void*x224; void*x225; void*x226; void*x227; void*x228; unsigned short x229; void*x230; short x231; void*x232; void*x233; void*x234; void*x235; unsigned long x236; int x237; unsigned int x238/* : ? */; const void*x239; const void*x240; void*x241; void*x242; const void*x243; void*x244; void*x245; void*x246; out const void*x247; short x248; void*x249; void*x250; void*x251; short x252; short x253; void*x254; int x255; void*x256; void*x257; float x258; const void*x259; void*x260; void*x261; void*x262; out const void*x263; void*x264; void*x265; void*x266; short x267; short x268; void*x269; int x270; void*x271; void*x272; void*x273; void*x274; void*x275; void*x276; void*x277; SEL x278; void*x279; void*x280; void*x281; void*x282; void*x283; void*x284; void*x285; void*x286; void*x287; void*x288; void*x289; void*x290; void*x291; void*x292; void*x293; void*x294; void*x295; void*x296; void*x297; void*x298; void*x299; void*x300; void*x301; void*x302; void*x303; void*x304; void*x305; void*x306; void*x307; void*x308; void*x309; void*x310; void*x311; Class x312; double x313; unsigned long long x314; void*x315; void*x316; void*x317; void*x318; void*x319; void*x320; void*x321; void*x322; void*x323; void*x324; void*x325; void*x326; void*x327; void*x328; void*x329; void*x330; void*x331; void*x332; void*x333; void*x334; void*x335; void*x336; void*x337; void*x338; void*x339; void*x340; void*x341; void*x342; void*x343; void*x344; void*x345; void*x346; void*x347; void*x348; void*x349; void*x350; void*x351; void*x352; void*x353; void*x354; void*x355; void*x356; void*x357; void*x358; void*x359; void*x360; void*x361; void*x362; void*x363; void*x364; void*x365; void*x366; void*x367; void*x368; void*x369; void*x370; void*x371; void*x372; void*x373; void*x374; unsigned short x375; void*x376; const void*x377; void*x378; void*x379; void*x380; void*x381; void*x382; void*x383; void*x384; void*x385; void*x386; void*x387; void*x388; void*x389; void*x390; void*x391; void*x392; void*x393; void*x394; void*x395; void*x396; void*x397; void*x398; void*x399; void*x400; void*x401; void*x402; void*x403; void*x404; SEL x405; void*x406; void*x407; void*x408; void*x409; void*x410; void*x411; void*x412; void*x413; void*x414; void*x415; void*x416; void*x417; void*x418; void*x419; void*x420; void*x421; void*x422; void*x423; void*x424; void*x425; void*x426; void*x427; void*x428; void*x429; void*x430; void*x431; void*x432; void*x433; void*x434; void*x435; void*x436; void*x437; void*x438; void*x439; const void*x440; void*x441; void*x442; in void*x443; void*x444; void*x445; double x446; void*x447; void*x448; void*x449; short x450; void*x451; void*x452; void*x453; out void*x454; const void*x455; void*x456; void*x457; void*x458; void*x459; void*x460; void*x461; void*x462; void*x463; void*x464; SEL x465; void*x466; void*x467; void*x468; void*x469; void*x470; void*x471; void*x472; void*x473; void*x474; void*x475; void*x476; void*x477; void*x478; void*x479; void*x480; void*x481; void*x482; void*x483; void*x484; void*x485; void*x486; void*x487; void*x488; void*x489; void*x490; void*x491; void*x492; void*x493; void*x494; void*x495; void*x496; void*x497; void*x498; void*x499; void*x500; void*x501; void*x502; void*x503; void*x504; void*x505; void*x506; void*x507; void*x508; void*x509; void*x510; void*x511; void*x512; SEL x513; void*x514; void*x515; void*x516; void*x517; id x518; unsigned short x519; void*x520; short x521; void*x522; void*x523; void*x524; void*x525; unsigned long x526; int x527; unsigned int x528/* : ? */; const void*x529; const void*x530; void*x531; void*x532; const void*x533; void*x534; void*x535; void*x536; out const void*x537; short x538; void*x539; unsigned char x540; out const void*x541; bool x542; long x543; void*x544; void*x545; void*x546; out out void*x547; void*x548; void*x549; float x550; const void*x551; void*x552; void*x553; void*x554; out const void*x555; void*x556; unsigned char x557; out const void*x558; bool x559; long x560; void*x561; void*x562; void*x563; out out void*x564; void*x565; void*x566; void*x567; void*x568; void*x569; void*x570; void*x571; void*x572; void*x573; void*x574; float x575; void*x576; void*x577; void*x578; void x579; void*x580; void*x581; void*x582; void*x583; void*x584; void*x585; void*x586; void*x587; void*x588; void*x589; void*x590; void*x591; void*x592; void*x593; void*x594; void*x595; void*x596; void*x597; void*x598; void*x599; void*x600; void*x601; void*x602; void*x603; void*x604; void*x605; void*x606; void*x607; SEL x608; void*x609; void*x610; void*x611; void*x612; void*x613; void*x614; unsigned short x615; long doublex616; void*x617; out void x618; int x619; void*x620; unsigned int x621; in float x622; out void*x623; void*x624; void*x625; void*x626; void*x627; void*x628; void*x629; void*x630; void*x631; void*x632; void*x633; void*x634; void*x635; void*x636; SEL x637; void*x638; void*x639; void*x640; void*x641; unsigned char x642; void*x643; unsigned short x644; void*x645; short x646; void*x647; void*x648; void*x649; void*x650; unsigned long x651; int x652; unsigned int x653/* : ? */; const void*x654; const void*x655; void*x656; void*x657; const int x658; void x659; void*x660; void*x661; void*x662; void*x663; const void*x664; void*x665; void*x666; void*x667; out const void*x668; short x669; void*x670; int x671; void*x672; out const void*x673; unsigned int x674; void*x675; void*x676; out const void*x677; void*x678; float x679; const void*x680; void*x681; void*x682; void*x683; out const void*x684; void*x685; int x686; void*x687; out const void*x688; unsigned int x689; void*x690; void*x691; out const void*x692; void*x693; void*x694; void*x695; void*x696; void*x697; void*x698; void*x699; SEL x700; void*x701; void*x702; void*x703; void*x704; void*x705; void*x706; void*x707; void*x708; void*x709; void*x710; void*x711; void*x712; void*x713; void*x714; void*x715; void*x716; void*x717; void*x718; void*x719; void*x720; void*x721; void*x722; void*x723; void*x724; void*x725; void*x726; void*x727; void*x728; void*x729; void*x730; out void*x731; void*x732; void*x733; double x734; void*x735; void*x736; void*x737; in void*x738; void*x739; void*x740; double x741; void*x742; void*x743; void*x744; int x745; void*x746; in void*x747; void*x748; void*x749; void*x750; void*x751; void*x752; void*x753; void*x754; void*x755; void*x756; void*x757; void*x758; void*x759; void*x760; SEL x761; void*x762; void*x763; void*x764; void*x765; void*x766; unsigned short x767; void*x768; unsigned int x769; void*x770; void*x771; unsigned long x772; long doublex773; void*x774; void*x775; void*x776; void*x777; void*x778; void*x779; void*x780; void*x781; void*x782; void*x783; void*x784; void*x785; void*x786; void*x787; void*x788; void*x789; void*x790; void x791; void*x792; void*x793; out void*x794; void*x795; void*x796; void*x797; void*x798; void*x799; void*x800; void*x801; void*x802; void*x803; void*x804; void*x805; void*x806; void*x807; void*x808; void*x809; void*x810; void*x811; void*x812; void*x813; void*x814; void*x815; void*x816; void*x817; void*x818; void*x819; void*x820; SEL x821; void*x822; void*x823; void*x824; void*x825; void*x826; void*x827; void*x828; void*x829; void*x830; void*x831; void*x832; void*x833; void*x834; void*x835; void*x836; void*x837; void*x838; void*x839; void*x840; void*x841; void*x842; void*x843; void*x844; void*x845; void*x846; void*x847; void*x848; void*x849; void*x850; void*x851; void*x852; void*x853; void*x854; void*x855; void*x856; void*x857; void*x858; void*x859; void*x860; void*x861; void*x862; void*x863; void*x864; void*x865; void*x866; void*x867; void*x868; void*x869; void*x870; void*x871; void*x872; void*x873; void*x874; void*x875; void*x876; void*x877; void*x878; void*x879; void*x880; void*x881; void*x882; void*x883; void*x884; SEL x885; void*x886; void*x887; void*x888; void*x889; void*x890; void*x891; void*x892; void*x893; void*x894; void*x895; void*x896; void*x897; void*x898; void*x899; void*x900; void*x901; void*x902; void*x903; void*x904; void*x905; void*x906; void*x907; void*x908; void*x909; void*x910; void*x911; void*x912; void*x913; void*x914; void*x915; void*x916; SEL x917; void*x918; void*x919; void*x920; void*x921; void*x922; void*x923; void*x924; void*x925; void*x926; void*x927; void*x928; void*x929; void*x930; void*x931; void*x932; void*x933; void*x934; void*x935; void*x936; void*x937; void*x938; void*x939; void*x940; void*x941; void*x942; void*x943; void*x944; void*x945; void*x946; void*x947; void*x948; SEL x949; void*x950; void*x951; void*x952; void*x953; unsigned char x954; void*x955; unsigned short x956; void*x957; short x958; void*x959; void*x960; void*x961; void*x962; unsigned long x963; int x964; unsigned int x965/* : ? */; const void*x966; const void*x967; void*x968; void*x969; const int x970; void x971; void*x972; void*x973; void*x974; void*x975; const void*x976; void*x977; void*x978; void*x979; out const void*x980; short x981; void*x982; int x983; void*x984; out const void*x985; unsigned int x986; void*x987; void*x988; out const void*x989; void*x990; float x991; const void*x992; void*x993; void*x994; void*x995; out const void*x996; void*x997; int x998; void*x999; out const void*x1000; unsigned int x1001; void*x1002; void*x1003; out const void*x1004; void*x1005; void*x1006; void*x1007; void*x1008; void*x1009; void*x1010; void*x1011; SEL x1012; void*x1013; void*x1014; void*x1015; void*x1016; void*x1017; void*x1018; void*x1019; unsigned long x1020; void*x1021; void*x1022; const void*x1023; void*x1024; double x1025; void*x1026; const out void*x1027; void*x1028; void*x1029; void*x1030; void*x1031; out const void*x1032; void*x1033; void*x1034; void*x1035; void*x1036; void*x1037; in void*x1038; void*x1039; void*x1040; void*x1041; void*x1042; void*x1043; void*x1044; void*x1045; void*x1046; void*x1047; void*x1048; void*x1049; void*x1050; void*x1051; void*x1052; SEL x1053; void*x1054; void*x1055; void*x1056; void*x1057; void*x1058; void*x1059; void*x1060; unsigned long x1061; void*x1062; void*x1063; const void*x1064; void*x1065; double x1066; void*x1067; const out void*x1068; void*x1069; void*x1070; void*x1071; void*x1072; out const void*x1073; void*x1074; void*x1075; void*x1076; void*x1077; void*x1078; in void*x1079; void*x1080; void*x1081; void*x1082; void*x1083; void*x1084; void*x1085; void*x1086; void*x1087; void*x1088; void*x1089; void*x1090; void*x1091; void*x1092; void*x1093; SEL x1094; void*x1095; void*x1096; void*x1097; void*x1098; void*x1099; void*x1100; void*x1101; void*x1102; void*x1103; void*x1104; void*x1105; void*x1106; void*x1107; void*x1108; void*x1109; void*x1110; void*x1111; void*x1112; void*x1113; void*x1114; void*x1115; void*x1116; void*x1117; void*x1118; void*x1119; void*x1120; void*x1121; void*x1122; void*x1123; void*x1124; void*x1125; unsigned long long x1126; void*x1127; void*x1128; void*x1129; void*x1130; void*x1131; void*x1132; void*x1133; void*x1134; void*x1135; void*x1136; void*x1137; void*x1138; void*x1139; void*x1140; void*x1141; void*x1142; void*x1143; void*x1144; unsigned short x1145; void*x1146; void*x1147; void*x1148; void*x1149; void*x1150; void*x1151; void*x1152; void*x1153; void*x1154; void*x1155; void*x1156; void*x1157; unsigned long long x1158; SEL x1159; void*x1160; void*x1161; void*x1162; void*x1163; void*x1164; void*x1165; void*x1166; void*x1167; void*x1168; void*x1169; void*x1170; void*x1171; void*x1172; void*x1173; void*x1174; void*x1175; void*x1176; void*x1177; void*x1178; void*x1179; void*x1180; void*x1181; void*x1182; void*x1183; void*x1184; void*x1185; void*x1186; void*x1187; void*x1188; void*x1189; SEL x1190; void*x1191; void*x1192; void*x1193; void*x1194; void*x1195; void*x1196; void*x1197; void*x1198; void*x1199; void*x1200; void*x1201; void*x1202; void*x1203; void*x1204; void*x1205; void*x1206; void*x1207; void*x1208; void*x1209; void*x1210; void*x1211; void*x1212; void*x1213; void*x1214; void*x1215; void*x1216; void*x1217; void*x1218; void*x1219; void*x1220; void*x1221; SEL x1222; void*x1223; void*x1224; void*x1225; void*x1226; void*x1227; void*x1228; void*x1229; int x1230; const void*x1231; long x1232; void*x1233; void*x1234; unsigned short x1235; void*x1236; void*x1237; void*x1238; int x1239; in void*x1240; short x1241; void*x1242; void*x1243; void*x1244; void*x1245; void*x1246; void*x1247; void*x1248; void*x1249; void*x1250; void*x1251; void*x1252; void*x1253; void*x1254; void*x1255; void*x1256; BOOL x1257; void*x1258; void*x1259; void*x1260; BOOL x1261; void*x1262; void*x1263; void*x1264; void*x1265; void*x1266; void*x1267; void*x1268; void*x1269; void*x1270; void*x1271; void*x1272; void*x1273; void*x1274; void*x1275; void*x1276; void*x1277; void*x1278; void*x1279; void*x1280; void*x1281; void*x1282; SEL x1283; void*x1284; void*x1285; void*x1286; void*x1287; void*x1288; void*x1289; void*x1290; int x1291; const void*x1292; long x1293; void*x1294; void*x1295; unsigned short x1296; void*x1297; void*x1298; void*x1299; int x1300; in void*x1301; short x1302; void*x1303; void*x1304; void*x1305; void*x1306; void*x1307; void*x1308; void*x1309; void*x1310; void*x1311; SEL x1312; void*x1313; void*x1314; void*x1315; void*x1316; void*x1317; void*x1318; unsigned short x1319; void*x1320; short x1321; void*x1322; void*x1323; void*x1324; void*x1325; unsigned long x1326; int x1327; unsigned int x1328/* : ? */; const void*x1329; const void*x1330; void*x1331; void*x1332; const void*x1333; void*x1334; void*x1335; void*x1336; out const void*x1337; short x1338; void*x1339; void*x1340; void*x1341; out void*x1342; out short x1343; void*x1344; unsigned int x1345; void*x1346; float x1347; const void*x1348; void*x1349; void*x1350; void*x1351; out const void*x1352; void*x1353; void*x1354; void*x1355; out void*x1356; out short x1357; void*x1358; unsigned int x1359; void*x1360; void*x1361; void*x1362; float x1363; void*x1364; void*x1365; float x1366; void*x1367; void*x1368; void*x1369; void*x1370; void*x1371; void*x1372; void*x1373; void*x1374; void*x1375; void*x1376; void*x1377; void*x1378; void*x1379; void*x1380; void*x1381; void*x1382; void*x1383; void*x1384; void*x1385; void*x1386; void*x1387; void*x1388; void*x1389; void*x1390; void*x1391; void*x1392; void*x1393; void*x1394; void*x1395; unsigned short x1396; void*x1397; const void*x1398; void*x1399; void*x1400; void*x1401; void*x1402; void*x1403; void*x1404; void*x1405; void*x1406; void*x1407; void*x1408; void*x1409; void*x1410; void*x1411; void*x1412; void*x1413; void*x1414; void*x1415; void*x1416; void*x1417; void*x1418; void*x1419; void*x1420; void*x1421; void*x1422; void*x1423; void*x1424; void*x1425; void*x1426; void*x1427; void*x1428; void*x1429; void*x1430; void*x1431; void*x1432; void*x1433; void*x1434; void*x1435; void*x1436; void*x1437; void*x1438; void*x1439; void*x1440; void*x1441; void*x1442; void*x1443; void*x1444; void*x1445; void*x1446; void*x1447; void*x1448; void*x1449; void*x1450; void*x1451; void*x1452; void*x1453; void*x1454; void*x1455; void*x1456; void*x1457; SEL x1458; void*x1459; void*x1460; void*x1461; void*x1462; void*x1463; void*x1464; void*x1465; void*x1466; void*x1467; void*x1468; void*x1469; void*x1470; void*x1471; void*x1472; void*x1473; void*x1474; void*x1475; void*x1476; void*x1477; void*x1478; void*x1479; void*x1480; void*x1481; void*x1482; void*x1483; void*x1484; void*x1485; void*x1486; void*x1487; void*x1488; void*x1489; SEL x1490; void*x1491; void*x1492; void*x1493; void*x1494; void*x1495; void*x1496; void*x1497; void*x1498; void*x1499; void*x1500; void*x1501; void*x1502; void*x1503; void*x1504; void*x1505; void*x1506; void*x1507; void*x1508; void*x1509; void*x1510; void*x1511; void*x1512; void*x1513; void*x1514; void*x1515; void*x1516; void*x1517; void*x1518; void*x1519; void*x1520; void*x1521; void*x1522; void*x1523; void*x1524; void*x1525; void*x1526; void*x1527; void*x1528; void*x1529; void*x1530; void*x1531; void*x1532; void*x1533; void*x1534; void*x1535; void*x1536; void*x1537; void*x1538; void*x1539; void*x1540; void*x1541; void*x1542; void*x1543; void*x1544; void*x1545; void*x1546; void*x1547; void*x1548; void*x1549; void*x1550; void*x1551; void*x1552; void*x1553; void*x1554; void*x1555; void*x1556; float x1557; void*x1558; void*x1559; void*x1560; void*x1561; void*x1562; void*x1563; void*x1564; void*x1565; void*x1566; void*x1567; void*x1568; void*x1569; SEL x1570; void*x1571; void*x1572; void*x1573; void*x1574; void*x1575; unsigned char x1576; void*x1577; void*x1578; in void*x1579; int x1580; void*x1581; void*x1582; void*x1583; void*x1584; void*x1585; void*x1586; void*x1587; void*x1588; void*x1589; void*x1590; void*x1591; void*x1592; void*x1593; void*x1594; void*x1595; void*x1596; void*x1597; void*x1598; void*x1599; out void*x1600; void*x1601; void*x1602; in void*x1603; void*x1604; void*x1605; void*x1606; void*x1607; void*x1608; void*x1609; void*x1610; void*x1611; void*x1612; void*x1613; void*x1614; void*x1615; void*x1616; void*x1617; void*x1618; void*x1619; void*x1620; void*x1621; void*x1622; void*x1623; void*x1624; void*x1625; void*x1626; void*x1627; void*x1628; unsigned char x1629; in void*x1630; void*x1631; void*x1632; void*x1633; void*x1634; void*x1635; void*x1636; void*x1637; void*x1638; void*x1639; void*x1640; void*x1641; void*x1642; void*x1643; void*x1644; void*x1645; void*x1646; void*x1647; void*x1648; void*x1649; void*x1650; void*x1651; void*x1652; void*x1653; void*x1654; void*x1655; void*x1656; void*x1657; void*x1658; void*x1659; void*x1660; void*x1661; void*x1662; void*x1663; void*x1664; void*x1665; void*x1666; long x1667; void*x1668; void*x1669; void*x1670; void*x1671; void*x1672; void*x1673; void*x1674; void*x1675; void*x1676; void*x1677; SEL x1678; void*x1679; void*x1680; void*x1681; void*x1682; void*x1683; void*x1684; unsigned short x1685; void*x1686; short x1687; void*x1688; void*x1689; void*x1690; void*x1691; unsigned long x1692; int x1693; unsigned int x1694/* : ? */; const void*x1695; const void*x1696; void*x1697; void*x1698; const int x1699; void x1700; void*x1701; void*x1702; void*x1703; void*x1704; const void*x1705; void*x1706; void*x1707; void*x1708; out const void*x1709; short x1710; void*x1711; unsigned short x1712; void*x1713; float x1714; void*x1715; const int x1716; unsigned short x1717; void*x1718; void*x1719; const void*x1720; double x1721; void*x1722; float x1723; const void*x1724; void*x1725; void*x1726; void*x1727; out const void*x1728; void*x1729; unsigned short x1730; void*x1731; float x1732; void*x1733; const int x1734; unsigned short x1735; void*x1736; void*x1737; const void*x1738; double x1739; void*x1740; void*x1741; void*x1742; void*x1743; void*x1744; SEL x1745; void*x1746; void*x1747; void*x1748; void*x1749; void*x1750; void*x1751; unsigned short x1752; void*x1753; short x1754; void*x1755; void*x1756; void*x1757; void*x1758; unsigned long x1759; int x1760; unsigned int x1761/* : ? */; const void*x1762; const void*x1763; void*x1764; void*x1765; const int x1766; void x1767; void*x1768; void*x1769; void*x1770; void*x1771; const void*x1772; void*x1773; void*x1774; void*x1775; out const void*x1776; short x1777; void*x1778; unsigned char x1779; out const void*x1780; void*x1781; void*x1782; in double x1783; void*x1784; const int x1785; void*x1786; int x1787; in void*x1788; void*x1789; float x1790; const void*x1791; void*x1792; void*x1793; void*x1794; out const void*x1795; void*x1796; unsigned char x1797; out const void*x1798; void*x1799; void*x1800; in double x1801; void*x1802; const int x1803; void*x1804; int x1805; in void*x1806; void*x1807; void*x1808; void*x1809; void*x1810; void*x1811; void*x1812; void*x1813; void*x1814; void*x1815; void*x1816; void*x1817; void*x1818; void*x1819; void*x1820; void*x1821; void*x1822; void*x1823; void*x1824; out void*x1825; void*x1826; void*x1827; void*x1828; void*x1829; void*x1830; void*x1831; void*x1832; void*x1833; void*x1834; void*x1835; void*x1836; void*x1837; out void*x1838; int x1839; long long x1840; void*x1841; void*x1842; void*x1843; void*x1844; void*x1845; void*x1846; void*x1847; void*x1848; void*x1849; void*x1850; void*x1851; SEL x1852; void*x1853; void*x1854; void*x1855; void*x1856; void*x1857; void*x1858; unsigned short x1859; void*x1860; short x1861; void*x1862; void*x1863; void*x1864; void*x1865; unsigned long x1866; int x1867; unsigned int x1868/* : ? */; const void*x1869; const void*x1870; void*x1871; void*x1872; const int x1873; void x1874; void*x1875; void*x1876; void*x1877; void*x1878; const void*x1879; void*x1880; void*x1881; void*x1882; out const void*x1883; short x1884; void*x1885; unsigned char x1886; out const void*x1887; void*x1888; void*x1889; double x1890; int x1891; void*x1892; unsigned short x1893; void*x1894; const void*x1895; void*x1896; void*x1897; void*x1898; float x1899; const void*x1900; void*x1901; void*x1902; void*x1903; out const void*x1904; void*x1905; unsigned char x1906; out const void*x1907; void*x1908; void*x1909; double x1910; int x1911; void*x1912; unsigned short x1913; void*x1914; const void*x1915; void*x1916; void*x1917; void*x1918; void*x1919; void*x1920; void*x1921; void*x1922; void*x1923; void*x1924; void*x1925; void*x1926; void*x1927; void*x1928; void*x1929; void*x1930; void*x1931; void*x1932; SEL x1933; void*x1934; void*x1935; void*x1936; void*x1937; void*x1938; void*x1939; void*x1940; void*x1941; void*x1942; void*x1943; void*x1944; void*x1945; void*x1946; void*x1947; void*x1948; void*x1949; void*x1950; void*x1951; void*x1952; void*x1953; void*x1954; void*x1955; void*x1956; void*x1957; void*x1958; void*x1959; void*x1960; void*x1961; unsigned long x1962; void*x1963; void*x1964; void*x1965; void*x1966; void*x1967; void x1968; void*x1969; void*x1970; void*x1971; void*x1972; void*x1973; void*x1974; void*x1975; void*x1976; void*x1977; void*x1978; void*x1979; void*x1980; void*x1981; void*x1982; void*x1983; void*x1984; void*x1985; void*x1986; void*x1987; void*x1988; void*x1989; void*x1990; void*x1991; void*x1992; void*x1993; void*x1994; void*x1995; void*x1996; SEL x1997; void*x1998; void*x1999; void*x2000; void*x2001; void*x2002; void*x2003; void*x2004; void*x2005; void*x2006; void*x2007; void*x2008; void*x2009; void*x2010; void*x2011; void*x2012; void*x2013; void*x2014; void*x2015; void*x2016; void*x2017; void*x2018; void*x2019; void*x2020; void*x2021; void*x2022; void*x2023; void*x2024; void*x2025; void*x2026; void*x2027; void*x2028; void*x2029; void*x2030; void*x2031; void*x2032; void*x2033; void*x2034; void*x2035; void*x2036; void*x2037; void*x2038; void*x2039; void*x2040; void*x2041; void*x2042; void*x2043; void*x2044; SEL x2045; void*x2046; void*x2047; void*x2048; void*x2049; void*x2050; inout unsigned short x2051; void*x2052; void*x2053; void*x2054; long doublex2055; void*x2056; void*x2057; void*x2058; void*x2059; SEL x2060; void*x2061; void*x2062; void*x2063; void*x2064; void*x2065; void*x2066; void*x2067; void*x2068; void*x2069; void*x2070; void*x2071; void*x2072; void*x2073; void*x2074; void*x2075; void*x2076; void*x2077; void*x2078; void*x2079; void*x2080; void*x2081; void*x2082; void*x2083; void*x2084; void*x2085; void*x2086; void*x2087; void*x2088; void*x2089; void*x2090; void*x2091; SEL x2092; void*x2093; void*x2094; void*x2095; void*x2096; void*x2097; void*x2098; unsigned long long x2099; void*x2100; void*x2101; void*x2102; unsigned int x2103/* : ? */; oneway int x2104; void*x2105; void*x2106; void*x2107; void*x2108; int x2109; void*x2110; void*x2111; const void*x2112; void*x2113; void*x2114; void*x2115; void*x2116; void*x2117; void*x2118; void*x2119; void*x2120; void*x2121; void*x2122; void*x2123; void*x2124; void*x2125; void*x2126; void*x2127; void*x2128; void*x2129; void*x2130; void*x2131; void*x2132; void*x2133; void*x2134; void*x2135; void*x2136; void*x2137; void*x2138; void*x2139; void*x2140; void*x2141; void*x2142; void*x2143; void*x2144; void*x2145; void*x2146; void*x2147; void*x2148; void*x2149; void*x2150; void*x2151; void*x2152; void*x2153; SEL x2154; void*x2155; void*x2156; void*x2157; void*x2158; void*x2159; void*x2160; unsigned long long x2161; void*x2162; void*x2163; void*x2164; unsigned int x2165/* : ? */; oneway int x2166; void*x2167; void*x2168; void*x2169; void*x2170; int x2171; void*x2172; void*x2173; const void*x2174; void*x2175; void*x2176; void*x2177; void*x2178; void*x2179; void*x2180; void*x2181; void*x2182; void*x2183; SEL x2184; void*x2185; void*x2186; void*x2187; void*x2188; unsigned char x2189; void*x2190; unsigned short x2191; void*x2192; short x2193; void*x2194; void*x2195; void*x2196; void*x2197; unsigned long x2198; int x2199; unsigned int x2200/* : ? */; const void*x2201; const void*x2202; void*x2203; void*x2204; const int x2205; void x2206; void*x2207; void*x2208; void*x2209; void*x2210; const void*x2211; void*x2212; void*x2213; void*x2214; out const void*x2215; short x2216; void*x2217; int x2218; void*x2219; out const void*x2220; unsigned int x2221; void*x2222; void*x2223; out const void*x2224; void*x2225; float x2226; const void*x2227; void*x2228; void*x2229; void*x2230; out const void*x2231; void*x2232; int x2233; void*x2234; out const void*x2235; unsigned int x2236; void*x2237; void*x2238; out const void*x2239; void*x2240; void*x2241; void*x2242; void*x2243; void*x2244; void*x2245; void*x2246; SEL x2247; void*x2248; void*x2249; void*x2250; void*x2251; void*x2252; void*x2253; void*x2254; void*x2255; void*x2256; void*x2257; void*x2258; void*x2259; void*x2260; void*x2261; void*x2262; void*x2263; void*x2264; void*x2265; void*x2266; void*x2267; void*x2268; void*x2269; void*x2270; void*x2271; void*x2272; void*x2273; void*x2274; void*x2275; void*x2276; void*x2277; void*x2278; void*x2279; void*x2280; void*x2281; void*x2282; void*x2283; void*x2284; void*x2285; void*x2286; void*x2287; void*x2288; void*x2289; void*x2290; void*x2291; void*x2292; void*x2293; void*x2294; void*x2295; void*x2296; void*x2297; void*x2298; void*x2299; void*x2300; void*x2301; void*x2302; void*x2303; void*x2304; void*x2305; void*x2306; void*x2307; void*x2308; void*x2309; void*x2310; SEL x2311; void*x2312; void*x2313; void*x2314; void*x2315; void*x2316; unsigned short x2317; void*x2318; void*x2319; out in void*x2320; void*x2321; long x2322; void*x2323; void*x2324; oneway out int x2325; BOOL x2326; void*x2327; void*x2328; void*x2329; int x2330; long x2331; void*x2332; void*x2333; void*x2334; void*x2335; void*x2336; void*x2337; void*x2338; void*x2339; void*x2340; void*x2341; void*x2342; void*x2343; void*x2344; void*x2345; void*x2346; void*x2347; void*x2348; void*x2349; void*x2350; void*x2351; void*x2352; void*x2353; void*x2354; void*x2355; void*x2356; void*x2357; void*x2358; void*x2359; void*x2360; void*x2361; void*x2362; void*x2363; void*x2364; void*x2365; void*x2366; void*x2367; void*x2368; void*x2369; void*x2370; void*x2371; void*x2372; long long x2373; void*x2374; void*x2375; void*x2376; Class x2377; void*x2378; char *x2379; void*x2380; void*x2381; void*x2382; void*x2383; void*x2384; void*x2385; void*x2386; void*x2387; void*x2388; void*x2389; void*x2390; void*x2391; void*x2392; void*x2393; void*x2394; void*x2395; void*x2396; void*x2397; void*x2398; void*x2399; void*x2400; void*x2401; SEL x2402; void*x2403; void*x2404; void*x2405; void*x2406; void*x2407; void*x2408; void*x2409; void*x2410; void*x2411; void*x2412; void*x2413; void*x2414; void*x2415; void*x2416; void*x2417; void*x2418; void*x2419; void*x2420; void*x2421; void*x2422; void*x2423; void*x2424; void*x2425; void*x2426; void*x2427; void*x2428; void*x2429; void*x2430; void*x2431; void*x2432; void*x2433; SEL x2434; void*x2435; void*x2436; void*x2437; void*x2438; void*x2439; void*x2440; void*x2441; void*x2442; void*x2443; void*x2444; void*x2445; void*x2446; void*x2447; void*x2448; void*x2449; void*x2450; void*x2451; void*x2452; void*x2453; void*x2454; void*x2455; void*x2456; void*x2457; void*x2458; void*x2459; void*x2460; void*x2461; void*x2462; void*x2463; void*x2464; void*x2465; SEL x2466; void*x2467; void*x2468; void*x2469; void*x2470; void*x2471; void*x2472; void*x2473; void*x2474; out long x2475; void*x2476; void*x2477; out in void*x2478; void*x2479; void*x2480; void*x2481; void*x2482; void*x2483; void*x2484; void*x2485; void*x2486; void*x2487; void*x2488; void*x2489; void*x2490; void*x2491; void*x2492; void*x2493; void*x2494; void*x2495; void*x2496; void*x2497; void*x2498; void*x2499; void*x2500; int x2501; void*x2502; void*x2503; void*x2504; int x2505; void*x2506; void*x2507; void*x2508; int x2509; void*x2510; void*x2511; void*x2512; void*x2513; void*x2514; void*x2515; void*x2516; void*x2517; void*x2518; void*x2519; void*x2520; void*x2521; void*x2522; void*x2523; void*x2524; void*x2525; void*x2526; SEL x2527; void*x2528; void*x2529; void*x2530; void*x2531; void*x2532; void*x2533; void*x2534; void*x2535; out long x2536; void*x2537; void*x2538; out in void*x2539; void*x2540; void*x2541; void*x2542; void*x2543; void*x2544; void*x2545; void*x2546; void*x2547; void*x2548; void*x2549; void*x2550; void*x2551; void*x2552; void*x2553; void*x2554; void*x2555; SEL x2556; void*x2557; void*x2558; void*x2559; void*x2560; void*x2561; void*x2562; unsigned short x2563; void*x2564; short x2565; void*x2566; void*x2567; void*x2568; void*x2569; unsigned long x2570; int x2571; unsigned int x2572/* : ? */; const void*x2573; const void*x2574; void*x2575; void*x2576; const void*x2577; void*x2578; void*x2579; void*x2580; out const void*x2581; short x2582; void*x2583; void*x2584; void*x2585; void*x2586; void*x2587; int x2588; void*x2589; void*x2590; float x2591; const void*x2592; void*x2593; void*x2594; void*x2595; out const void*x2596; void*x2597; void*x2598; void*x2599; void*x2600; void*x2601; int x2602; void*x2603; void*x2604; void*x2605; void*x2606; void*x2607; void*x2608; void*x2609; void*x2610; void*x2611; SEL x2612; void*x2613; void*x2614; void*x2615; void*x2616; void*x2617; void*x2618; void*x2619; void*x2620; void*x2621; void*x2622; void*x2623; void*x2624; void*x2625; void*x2626; void*x2627; void*x2628; void*x2629; void*x2630; void*x2631; void*x2632; void*x2633; void*x2634; void*x2635; void*x2636; void*x2637; void*x2638; void*x2639; void*x2640; void*x2641; void*x2642; void*x2643; SEL x2644; void*x2645; void*x2646; void*x2647; void*x2648; void*x2649; void*x2650; void*x2651; void*x2652; void*x2653; void*x2654; void*x2655; void*x2656; void*x2657; void*x2658; void*x2659; void*x2660; void*x2661; void*x2662; void*x2663; void*x2664; void*x2665; void*x2666; void*x2667; void*x2668; void*x2669; void*x2670; void*x2671; void*x2672; void*x2673; void*x2674; void*x2675; void*x2676; void*x2677; void*x2678; void*x2679; void*x2680; void*x2681; void*x2682; char *x2683; void*x2684; void*x2685; void*x2686; char *x2687; void*x2688; void*x2689; void*x2690; char *x2691; void*x2692; void*x2693; void*x2694; void*x2695; void*x2696; void*x2697; void*x2698; void*x2699; void*x2700; void*x2701; void*x2702; void*x2703; void*x2704; void*x2705; void*x2706; void*x2707; void*x2708; void*x2709; void*x2710; void*x2711; void*x2712; void*x2713; void*x2714; void*x2715; void*x2716; void*x2717; void*x2718; void*x2719; void*x2720; void*x2721; void*x2722; void*x2723; void*x2724; void*x2725; void*x2726; void*x2727; void*x2728; void*x2729; void*x2730; void*x2731; void*x2732; void*x2733; void*x2734; void*x2735; void*x2736; void*x2737; void*x2738; SEL x2739; void*x2740; void*x2741; void*x2742; void*x2743; void*x2744; unsigned short x2745; void*x2746; void*x2747; out in void*x2748; void*x2749; void*x2750; void*x2751; const void*x2752; void*x2753; void*x2754; double x2755; void*x2756; void*x2757; void*x2758; void*x2759; void*x2760; void*x2761; void*x2762; void*x2763; void*x2764; void*x2765; void*x2766; void*x2767; void*x2768; const void*x2769; void*x2770; void*x2771; void*x2772; void*x2773; void*x2774; void*x2775; in void*x2776; out void*x2777; double x2778; void*x2779; void*x2780; void*x2781; void*x2782; void*x2783; void x2784; void*x2785; out void*x2786; int x2787; void*x2788; double x2789; void*x2790; void*x2791; void*x2792; char *x2793; void*x2794; void*x2795; void*x2796; void*x2797; void*x2798; void x2799; void*x2800; out void*x2801; int x2802; void*x2803; double x2804; void*x2805; void*x2806; void*x2807; char *x2808; void*x2809; void*x2810; void*x2811; void*x2812; void*x2813; struct x2814; void*x2815; }*coastlineMesh; /* unknown property attribute:  std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}} */
@property (nonatomic, readonly) struct shared_ptr<ggl::Texture2D> { struct Texture2D {} *x1; struct __shared_weak_count {} *x2; } defaultLandTexture;
@property (nonatomic, readonly) struct shared_ptr<ggl::Texture2D> { struct Texture2D {} *x1; struct __shared_weak_count {} *x2; } defaultLandTextureVariant;
@property (nonatomic, readonly) struct FogInfo { struct shared_ptr<ggl::ConstantDataTyped<ggl::Fog::Skyfog> > { struct ConstantDataTyped<ggl::Fog::Skyfog> {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; }*fogInfo;
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{vector<std::__1::shared_ptr<md::TexturedDrawable>' */ struct *landDrawables; /* unknown property attribute:  std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable> > >=^{shared_ptr<md::TexturedDrawable>}}} */
@property (nonatomic, readonly) float landZ;
@property (nonatomic, readonly) NSArray *realisticRoadGroups;
@property (nonatomic, readonly) struct shared_ptr<ggl::ConstantDataTyped<ggl::RealisticTexture::Realistic> > { struct ConstantDataTyped<ggl::RealisticTexture::Realistic> {} *x1; struct __shared_weak_count {} *x2; } realisticTextureConstantData;
@property (nonatomic, readonly) float roadZ;
@property (nonatomic) BOOL shouldBlend;
@property (nonatomic, retain) VKAnimation *startDrawingAnimation;
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{vector<std::__1::shared_ptr<md::TexturedDrawable>' */ struct *waterDrawables; /* unknown property attribute:  std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable> > >=^{shared_ptr<md::TexturedDrawable>}}} */
@property (nonatomic, readonly) float waterZ;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_addCoastlineMeshForPoints:(const struct Matrix<float, 2, 1> { float x1[2]; }*)arg1 pointCount:(unsigned int)arg2;
- (struct shared_ptr<ggl::Texture2D> { struct Texture2D {} *x1; struct __shared_weak_count {} *x2; })_createDefaultTextureForLevelOfDetail:(unsigned int)arg1 takeVariant:(BOOL)arg2;
- (struct TexturedDrawable { struct unique_ptr<ggl::MeshVendor<ggl::PolygonBase::CompressedMeshMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::PolygonBase::CompressedMeshMesh> > > { struct __compressed_pair<ggl::MeshVendor<ggl::PolygonBase::CompressedMeshMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::PolygonBase::CompressedMeshMesh> > > { struct MeshVendor<ggl::PolygonBase::CompressedMeshMesh> {} *x_1_2_1; } x_1_1_1; } x1; struct vector<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > >, std::__1::allocator<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > > > { struct vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > {} *x_2_1_1; struct vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > {} *x_2_1_2; struct __compressed_pair<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > *, std::__1::allocator<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > > > { struct vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > {} *x_3_2_1; } x_2_1_3; } x2; struct shared_ptr<ggl::Texture2D> { struct Texture2D {} *x_3_1_1; struct __shared_weak_count {} *x_3_1_2; } x3; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_5_1; unsigned int x_1_5_2; char *x_1_5_3; } x_1_4_1; struct __short { union { unsigned char x_1_6_1; BOOL x_1_6_2; } x_2_5_1; BOOL x_2_5_2[11]; } x_1_4_2; struct __raw { unsigned long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_4_1_1; } x4; struct shared_ptr<ggl::Texture2D> { struct Texture2D {} *x_5_1_1; struct __shared_weak_count {} *x_5_1_2; } x5; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_5_1; unsigned int x_1_5_2; char *x_1_5_3; } x_1_4_1; struct __short { union { unsigned char x_1_6_1; BOOL x_1_6_2; } x_2_5_1; BOOL x_2_5_2[11]; } x_1_4_2; struct __raw { unsigned long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_6_1_1; } x6; struct shared_ptr<gss::StyleQuery> { struct StyleQuery {} *x_7_1_1; struct __shared_weak_count {} *x_7_1_2; } x7; }*)_drawableInMap:(struct map<std::__1::basic_string<char>, unsigned long, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned long> > > { struct __tree<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, unsigned long> > > { struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true> > { unsigned long x_3_2_1; } x_1_1_3; } x1; }*)arg1 vendors:(struct vector<std::__1::shared_ptr<md::TexturedDrawable>, std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable> > > { struct shared_ptr<md::TexturedDrawable> {} *x1; struct shared_ptr<md::TexturedDrawable> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::TexturedDrawable> *, std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable> > > { struct shared_ptr<md::TexturedDrawable> {} *x_3_1_1; } x3; }*)arg2 forStyleQuery:(struct shared_ptr<gss::StyleQuery> { struct StyleQuery {} *x1; struct __shared_weak_count {} *x2; })arg3;
- (id)_groupForRenderZ:(int)arg1;
- (void)_parseCoastlines;
- (void)_parsePolygons;
- (void)_updateDefaultLandTextures;
- (void)addTriangulatedPointsToDrawableInMap:(struct map<std::__1::basic_string<char>, unsigned long, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned long> > > { struct __tree<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, unsigned long> > > { struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true> > { unsigned long x_3_2_1; } x_1_1_3; } x1; }*)arg1 vendors:(struct vector<std::__1::shared_ptr<md::TexturedDrawable>, std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable> > > { struct shared_ptr<md::TexturedDrawable> {} *x1; struct shared_ptr<md::TexturedDrawable> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::TexturedDrawable> *, std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable> > > { struct shared_ptr<md::TexturedDrawable> {} *x_3_1_1; } x3; }*)arg2 zIndex:(float)arg3 points:(const struct Matrix<float, 2, 1> { float x1[2]; }*)arg4 pointCount:(unsigned int)arg5 indices:(const unsigned short*)arg6 indexCount:(unsigned int)arg7 styleQuery:(struct shared_ptr<gss::StyleQuery> { struct StyleQuery {} *x1; struct __shared_weak_count {} *x2; })arg8;
- (float)alpha;
- (struct RealisticMesh { int (**x1)(); char *x2; int (**x3)(); struct ResourceManager {} *x4; struct RenderResource {} *x5; struct MeshCReflection {} *x6; struct vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > > { struct shared_ptr<ggl::VertexData> {} *x_7_1_1; struct shared_ptr<ggl::VertexData> {} *x_7_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > > { struct shared_ptr<ggl::VertexData> {} *x_3_2_1; } x_7_1_3; } x7; struct shared_ptr<ggl::IndexData> { struct IndexData {} *x_8_1_1; struct __shared_weak_count {} *x_8_1_2; } x8; }*)coastlineMesh;
- (void)createMeshes;
- (void)dealloc;
- (struct shared_ptr<ggl::Texture2D> { struct Texture2D {} *x1; struct __shared_weak_count {} *x2; })defaultLandTexture;
- (struct shared_ptr<ggl::Texture2D> { struct Texture2D {} *x1; struct __shared_weak_count {} *x2; })defaultLandTextureVariant;
- (struct FogInfo { struct shared_ptr<ggl::ConstantDataTyped<ggl::Fog::Skyfog> > { struct ConstantDataTyped<ggl::Fog::Skyfog> {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; }*)fogInfo;
- (id)initWithKey:(const struct VKTileKey { unsigned int x1; int x2; int x3; unsigned int x4; }*)arg1 modelTile:(id)arg2 styleManager:(struct shared_ptr<gss::StyleManager> { struct StyleManager {} *x1; struct __shared_weak_count {} *x2; })arg3 sharedResources:(id)arg4 contentScale:(float)arg5 device:(struct Device { }*)arg6;
- (struct vector<std::__1::shared_ptr<md::TexturedDrawable>, std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable> > > { struct shared_ptr<md::TexturedDrawable> {} *x1; struct shared_ptr<md::TexturedDrawable> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::TexturedDrawable> *, std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable> > > { struct shared_ptr<md::TexturedDrawable> {} *x_3_1_1; } x3; }*)landDrawables;
- (float)landZ;
- (id)realisticRoadGroups;
- (struct shared_ptr<ggl::ConstantDataTyped<ggl::RealisticTexture::Realistic> > { struct ConstantDataTyped<ggl::RealisticTexture::Realistic> {} *x1; struct __shared_weak_count {} *x2; })realisticTextureConstantData;
- (float)roadZ;
- (void)setAlpha:(float)arg1;
- (void)setShouldBlend:(BOOL)arg1;
- (void)setStartDrawingAnimation:(id)arg1;
- (BOOL)shouldBlend;
- (id)startDrawingAnimation;
- (void)updateTextures;
- (void)updateViewDependentStateIfNecessaryWithContext:(id)arg1;
- (void)updateViewDependentStateWithContext:(id)arg1;
- (int)vectorType;
- (struct vector<std::__1::shared_ptr<md::TexturedDrawable>, std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable> > > { struct shared_ptr<md::TexturedDrawable> {} *x1; struct shared_ptr<md::TexturedDrawable> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::TexturedDrawable> *, std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable> > > { struct shared_ptr<md::TexturedDrawable> {} *x_3_1_1; } x3; }*)waterDrawables;
- (float)waterZ;

@end
