/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKGlobeLineContainer : NSObject <VKPolylineGroupOverlayObserver, VKPolylineObserver> {
    <VKGlobeLineContainerDelegate> * _delegate;
    struct GlobeViewImp { int (**x1)(); struct AnchorManagerPrivate {} *x2; struct Scene {} *x3; struct Projection { struct Perspective { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_4_1_1; struct Ortho { double x_2_2_1; double x_2_2_2; double x_2_2_3; double x_2_2_4; double x_2_2_5; double x_2_2_6; } x_4_1_2; bool x_4_1_3; bool x_4_1_4; } x4; struct FrameLatLon { double x_5_1_1; double x_5_1_2; double x_5_1_3; double x_5_1_4; struct PositionLatLonAlt { double x_5_2_1; double x_5_2_2; double x_5_2_3; } x_5_1_5; } x5; bool x6; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_5_1; unsigned int x_1_5_2; char *x_1_5_3; } x_1_4_1; struct __short { union { unsigned char x_1_6_1; BOOL x_1_6_2; } x_2_5_1; BOOL x_2_5_2[11]; } x_1_4_2; struct __raw { unsigned long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_7_1_1; } x7; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_5_1; unsigned int x_1_5_2; char *x_1_5_3; } x_1_4_1; struct __short { union { unsigned char x_1_6_1; BOOL x_1_6_2; } x_2_5_1; BOOL x_2_5_2[11]; } x_1_4_2; struct __raw { unsigned long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_8_1_1; } x8; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_5_1; unsigned int x_1_5_2; char *x_1_5_3; } x_1_4_1; struct __short { union { unsigned char x_1_6_1; BOOL x_1_6_2; } x_2_5_1; BOOL x_2_5_2[11]; } x_1_4_2; struct __raw { unsigned long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_9_1_1; } x9; struct AnimationTimer { struct AnimationReferenceTimer {} *x_10_1_1; double x_10_1_2; double x_10_1_3; double x_10_1_4; } x10; struct FrameLatLon { double x_11_1_1; double x_11_1_2; double x_11_1_3; double x_11_1_4; struct PositionLatLonAlt { double x_5_2_1; double x_5_2_2; double x_5_2_3; } x_11_1_5; } x11; struct vector<altitude::TileBound, std::__1::allocator<altitude::TileBound> > { struct TileBound {} *x_12_1_1; struct TileBound {} *x_12_1_2; struct __compressed_pair<altitude::TileBound *, std::__1::allocator<altitude::TileBound> > { struct TileBound {} *x_3_2_1; } x_12_1_3; } x12; struct vector<altitude::SimpleTileKey, std::__1::allocator<altitude::SimpleTileKey> > { struct SimpleTileKey {} *x_13_1_1; struct SimpleTileKey {} *x_13_1_2; struct __compressed_pair<altitude::SimpleTileKey *, std::__1::allocator<altitude::SimpleTileKey> > { struct SimpleTileKey {} *x_3_2_1; } x_13_1_3; } x13; struct vector<altitude::Position2d, std::__1::allocator<altitude::Position2d> > { struct Position2d {} *x_14_1_1; struct Position2d {} *x_14_1_2; struct __compressed_pair<altitude::Position2d *, std::__1::allocator<altitude::Position2d> > { struct Position2d {} *x_3_2_1; } x_14_1_3; } x14; bool x15; bool x16; bool x17; bool x18; unsigned int x19; unsigned int x20; unsigned int x21; unsigned int x22; struct VKClassicGlobeCanvas { } *x23; struct DynamicMovement {} *x24; bool x25; bool x26; int x27; int x28; int x29; double x30; double x31; struct queue<altitude::Animation *, std::__1::deque<altitude::Animation *, std::__1::allocator<altitude::Animation *> > > { struct deque<altitude::Animation *, std::__1::allocator<altitude::Animation *> > { struct __split_buffer<altitude::Animation **, std::__1::allocator<altitude::Animation **> > { struct Animation {} ***x_1_3_1; struct Animation {} ***x_1_3_2; struct Animation {} ***x_1_3_3; struct __compressed_pair<altitude::Animation ***, std::__1::allocator<altitude::Animation **> > { struct Animation {} ***x_4_4_1; } x_1_3_4; } x_1_2_1; unsigned int x_1_2_2; struct __compressed_pair<unsigned long, std::__1::allocator<altitude::Animation *> > { unsigned long x_3_3_1; } x_1_2_3; } x_32_1_1; } x32; struct AnimationManager { struct AnimationTimer { struct AnimationReferenceTimer {} *x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_33_1_1; double x_33_1_2; struct vector<altitude::AnimationObjectHolder, std::__1::allocator<altitude::AnimationObjectHolder> > { struct AnimationObjectHolder {} *x_3_2_1; struct AnimationObjectHolder {} *x_3_2_2; struct __compressed_pair<altitude::AnimationObjectHolder *, std::__1::allocator<altitude::AnimationObjectHolder> > { struct AnimationObjectHolder {} *x_3_3_1; } x_3_2_3; } x_33_1_3; } x33; struct Timer { double x_34_1_1; } x34; double x35; bool x36; bool x37; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_5_1; unsigned int x_1_5_2; char *x_1_5_3; } x_1_4_1; struct __short { union { unsigned char x_1_6_1; BOOL x_1_6_2; } x_2_5_1; BOOL x_2_5_2[11]; } x_1_4_2; struct __raw { unsigned long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_38_1_1; } x38; double x39; double x40; double x41; struct AnimationTimer { struct AnimationReferenceTimer {} *x_42_1_1; double x_42_1_2; double x_42_1_3; double x_42_1_4; } x42; struct FrameLatLon { double x_43_1_1; double x_43_1_2; double x_43_1_3; double x_43_1_4; struct PositionLatLonAlt { double x_5_2_1; double x_5_2_2; double x_5_2_3; } x_43_1_5; } x43; struct C3mmRequestManager {} *x44; struct MeshElement {} *x45; unsigned int x46; struct FrameLatLon { double x_47_1_1; double x_47_1_2; double x_47_1_3; double x_47_1_4; struct PositionLatLonAlt { double x_5_2_1; double x_5_2_2; double x_5_2_3; } x_47_1_5; } x47; int x48; double x49; bool x50; bool x51; struct map<altitude::TileId, void (*)(const altitude::SimpleTileKey &, bool), std::__1::less<altitude::TileId>, std::__1::allocator<std::__1::pair<const altitude::TileId, void (*)(const altitude::SimpleTileKey &, bool)> > >={__tree<std::__1::__value_type<altitude::TileId, void (*)(const altitude::SimpleTileKey &, bool)>, std::__1::__map_value_compare<altitude::TileId, std::__1::__value_type<altitude::TileId, void (*)(const altitude::SimpleTileKey &, bool)>, std::__1::less<altitude::TileId>, true>, std::__1::allocator<std::__1::__value_type<altitude::TileId, void (*)(const altitude::SimpleTileKey &, bool)> > >=^{__tree_node<std::__1::__value_type<altitude::TileId, void (*)(const altitude::SimpleTileKey &, bool)>, void *> {} x52; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<altitude::TileId, void (*)(const altitude::SimpleTileKey &, bool)>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *> {} x53; } * _globeView;
    NSMutableArray * _overlays;
    NSMutableSet * _persistentOverlays;
    struct map<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>, std::__1::less<VKPolylineOverlay *>, std::__1::allocator<std::__1::pair<VKPolylineOverlay *const, std::__1::weak_ptr<altitude::RouteLineData> > > > { 
        struct __tree<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, std::__1::__map_value_compare<VKPolylineOverlay *, std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, std::__1::less<VKPolylineOverlay *>, true>, std::__1::allocator<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> > > > { 
            struct __tree_node<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, void *> {} *__begin_node_; 
            struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, void *> > > { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                    struct __tree_node_base<void *> {} *__left_; 
                } __first_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__1::__map_value_compare<VKPolylineOverlay *, std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, std::__1::less<VKPolylineOverlay *>, true> > { 
                unsigned long __first_; 
            } __pair3_; 
        } __tree_; 
    }  _polylinesToRoutes;
    <VKRouteMatchedAnnotationPresentation> * _routeLineSplitAnnotation;
    struct VKGlobeRouteSplit { int (**x1)(); id x2; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x3; void*x4; void*x5; void*x6; void*x7; void*x8; void*x9; void*x10; void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; void*x35; void*x36; void*x37; void*x38; void*x39; void*x40; void*x41; void*x42; void*x43; void*x44; void*x45; void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; SEL x52; void*x53; void*x54; void*x55; void*x56; void*x57; void*x58; unsigned int x59; void*x60; void*x61; const void*x62; void*x63; double x64; unsigned short x65; void*x66; float x67; void*x68; inout out double x69; void*x70; void*x71; void*x72; void*x73; void*x74; void*x75; void*x76; void*x77; void*x78; void*x79; void*x80; void*x81; void*x82; void*x83; void*x84; void*x85; void*x86; void*x87; void*x88; void*x89; void*x90; void*x91; void*x92; void*x93; int x94; bool x95; void*x96; void*x97; bycopy void*x98; void*x99; void*x100; void*x101; void*x102; unsigned short x103; void*x104; short x105; void*x106; void*x107; void*x108; void*x109; unsigned long x110; int x111; unsigned int x112/* : ? */; const void*x113; const void*x114; void*x115; void*x116; const int x117; void x118; void*x119; void*x120; void*x121; void*x122; const void*x123; void*x124; void*x125; void*x126; out const void*x127; short x128; void*x129; void*x130; out void*x131; void*x132; const long x133; out void*x134; unsigned long x135; int x136; void*x137; void*x138; bycopy void*x139; void*x140; const void*x141; void*x142; out const short x143; void*x144; float x145; const void*x146; void*x147; void*x148; void*x149; out const void*x150; void*x151; void*x152; out void*x153; void*x154; const long x155; out void*x156; unsigned long x157; int x158; void*x159; void*x160; bycopy void*x161; void*x162; const void*x163; void*x164; out const short x165; void*x166; void*x167; void*x168; void*x169; void*x170; void*x171; void*x172; void*x173; void*x174; void*x175; void*x176; void*x177; void*x178; void*x179; void*x180; void*x181; void*x182; void*x183; void*x184; SEL x185; void*x186; void*x187; void*x188; void*x189; void*x190; void*x191; void*x192; unsigned char x193; out in in void*x194; BOOL x195; void*x196; int x197; out in unsigned short x198; void*x199; void*x200; void*x201; int x202; in void*x203; short x204; void*x205; void*x206; void*x207; void*x208; void*x209; void*x210; SEL x211; void*x212; void*x213; void*x214; void*x215; void*x216; void*x217; unsigned short x218; void*x219; short x220; void*x221; void*x222; void*x223; void*x224; unsigned long x225; int x226; unsigned int x227/* : ? */; const void*x228; const void*x229; void*x230; void*x231; const int x232; void x233; void*x234; void*x235; void*x236; void*x237; const void*x238; void*x239; void*x240; void*x241; out const void*x242; short x243; void*x244; void*x245; void*x246; short x247; short x248; void*x249; void*x250; void*x251; void*x252; float x253; const void*x254; void*x255; void*x256; void*x257; out const void*x258; void*x259; void*x260; void*x261; short x262; short x263; void*x264; void*x265; void*x266; void*x267; void*x268; void*x269; void*x270; void*x271; void*x272; void*x273; void*x274; void*x275; void*x276; void*x277; void*x278; void*x279; void*x280; void*x281; SEL x282; void*x283; void*x284; void*x285; void*x286; void*x287; void*x288; void*x289; void*x290; void*x291; void*x292; void*x293; void*x294; void*x295; void*x296; void*x297; void*x298; void*x299; void*x300; void*x301; void*x302; void*x303; void*x304; void*x305; void*x306; void*x307; void*x308; void*x309; void*x310; void*x311; void*x312; void*x313; void*x314; void*x315; void*x316; long x317; void*x318; void*x319; void*x320; void*x321; void*x322; void*x323; void*x324; void*x325; void*x326; void*x327; void*x328; void*x329; void*x330; void*x331; void*x332; void*x333; void*x334; void*x335; void*x336; void*x337; void*x338; void*x339; void*x340; void*x341; void*x342; void*x343; void*x344; void*x345; void*x346; void*x347; void*x348; void*x349; void*x350; void*x351; void*x352; void*x353; void*x354; void*x355; void*x356; void*x357; void*x358; void*x359; void*x360; void*x361; void*x362; void*x363; void*x364; void*x365; void*x366; void*x367; void*x368; void*x369; void*x370; void*x371; void*x372; void*x373; void*x374; void*x375; void*x376; void*x377; void*x378; void*x379; void*x380; void*x381; void*x382; void*x383; out void*x384; in void*x385; short x386; void*x387; void*x388; void*x389; void*x390; void*x391; void x392; void*x393; out void*x394; int x395; void*x396; double x397; void*x398; char *x399; void*x400; void*x401; void*x402; void*x403; void*x404; void*x405; SEL x406; void*x407; void*x408; void*x409; void*x410; void*x411; void*x412; void*x413; void*x414; void*x415; void*x416; void*x417; void*x418; void*x419; void*x420; void*x421; void*x422; void*x423; void*x424; void*x425; void*x426; void*x427; void*x428; void*x429; void*x430; void*x431; void*x432; void*x433; void*x434; void*x435; void*x436; void*x437; SEL x438; void*x439; void*x440; void*x441; void*x442; void*x443; void*x444; void*x445; void*x446; void*x447; void*x448; void*x449; void*x450; void*x451; void*x452; void*x453; void*x454; void*x455; void*x456; void*x457; void*x458; void*x459; void*x460; void*x461; void*x462; void*x463; void*x464; void*x465; void*x466; void*x467; void*x468; void*x469; void*x470; void*x471; void*x472; long x473; void*x474; void*x475; void*x476; void*x477; void*x478; void*x479; void*x480; void*x481; void*x482; void*x483; void*x484; void*x485; void*x486; void*x487; void*x488; void*x489; void*x490; void*x491; void*x492; void*x493; void*x494; void*x495; void*x496; void*x497; void*x498; void*x499; void*x500; void*x501; void*x502; void*x503; void*x504; void*x505; void*x506; void*x507; void*x508; void*x509; void*x510; void*x511; void*x512; void*x513; void*x514; void*x515; void*x516; void*x517; void*x518; void*x519; void*x520; void*x521; void*x522; void*x523; void*x524; void*x525; void*x526; void*x527; void*x528; void*x529; void*x530; void*x531; void*x532; void*x533; SEL x534; void*x535; void*x536; void*x537; void*x538; void*x539; void*x540; void*x541; void*x542; void*x543; void*x544; void*x545; void*x546; void*x547; void*x548; void*x549; void*x550; void*x551; void*x552; void*x553; void*x554; void*x555; void*x556; void*x557; void*x558; void*x559; void*x560; void*x561; void*x562; void*x563; void*x564; void*x565; void*x566; void*x567; in void*x568; void*x569; void*x570; void*x571; void*x572; void*x573; void*x574; void*x575; void*x576; void*x577; void*x578; void*x579; void*x580; void*x581; void*x582; void*x583; void*x584; void*x585; void*x586; void*x587; void*x588; void*x589; void*x590; void*x591; void*x592; void*x593; void*x594; void*x595; void*x596; SEL x597; void*x598; void*x599; void*x600; void*x601; void*x602; void*x603; void*x604; void*x605; void*x606; void*x607; void*x608; void*x609; void*x610; void*x611; void*x612; void*x613; void*x614; void*x615; void*x616; void*x617; void*x618; void*x619; void*x620; void*x621; void*x622; void*x623; void*x624; void*x625; void*x626; void*x627; void*x628; SEL x629; void*x630; void*x631; void*x632; void*x633; void*x634; void*x635; void*x636; void*x637; void*x638; void*x639; void*x640; void*x641; void*x642; void*x643; void*x644; void*x645; void*x646; void*x647; void*x648; void*x649; void*x650; void*x651; void*x652; void*x653; void*x654; void*x655; void*x656; void*x657; void*x658; void*x659; void*x660; SEL x661; void*x662; void*x663; void*x664; void*x665; void*x666; void*x667; void*x668; void*x669; void*x670; void*x671; void*x672; void*x673; void*x674; void*x675; void*x676; void*x677; void*x678; void*x679; void*x680; void*x681; void*x682; void*x683; void*x684; void*x685; void*x686; void*x687; void*x688; void*x689; void*x690; void*x691; void*x692; void*x693; void*x694; void*x695; long x696; void*x697; void*x698; void*x699; void*x700; void*x701; void*x702; void*x703; void*x704; void*x705; void*x706; void*x707; void*x708; void*x709; void*x710; void*x711; void*x712; void*x713; void*x714; void*x715; void*x716; void*x717; void*x718; void*x719; void*x720; void*x721; void*x722; void*x723; void*x724; SEL x725; void*x726; void*x727; void*x728; void*x729; void*x730; void*x731; void*x732; void*x733; void*x734; void*x735; void*x736; void*x737; void*x738; void*x739; void*x740; void*x741; void*x742; void*x743; void*x744; void*x745; void*x746; void*x747; void*x748; void*x749; void*x750; void*x751; void*x752; void*x753; void*x754; void*x755; void*x756; void*x757; void*x758; void*x759; long x760; void*x761; void*x762; void*x763; void*x764; void*x765; void*x766; void*x767; void*x768; void*x769; void*x770; void*x771; void*x772; void*x773; void*x774; void*x775; void*x776; void*x777; void*x778; void*x779; void*x780; void*x781; void*x782; void*x783; void*x784; void*x785; void*x786; void*x787; void*x788; void*x789; void*x790; void*x791; void*x792; void*x793; void*x794; void*x795; void*x796; void*x797; void*x798; void*x799; void*x800; void*x801; void*x802; void*x803; void*x804; void*x805; void*x806; void*x807; void*x808; void*x809; void*x810; void*x811; void*x812; void*x813; void*x814; void*x815; void*x816; void*x817; void*x818; unsigned int x819; struct x820; void*x821; void*x822; void*x823; void*x824; void*x825; void*x826; void*x827; void*x828; void*x829; void*x830; void*x831; void*x832; void*x833; void*x834; void*x835; void*x836; void*x837; void*x838; void*x839; void*x840; void*x841; void*x842; void*x843; void*x844; void*x845; void*x846; void*x847; void*x848; void*x849; void*x850; int x851; void*x852; void*x853; void*x854; void*x855; short x856; short x857; void*x858; void*x859; void*x860; unsigned long long x861; void*x862; void*x863; void*x864; void*x865; long doublex866; void*x867; long x868; void*x869; void*x870; void*x871; void*x872; void*x873; void*x874; int x875; } * _routeSplit;
    VKPolylineOverlay * _selectedPolyline;
}

@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <VKGlobeLineContainerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned int hash;
@property (nonatomic, retain) <VKRouteMatchedAnnotationPresentation> *routeLineSplitAnnotation;
@property (readonly) Class superclass;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_recreateLinesIfNeeded;
- (void)_updateRouteSplit;
- (void)addLine:(id)arg1;
- (void)addOverlay:(id)arg1;
- (void)addPersistentOverlay:(id)arg1;
- (void)clearLineSelection;
- (void)dealloc;
- (id)delegate;
- (id)initWithGlobeView:(struct GlobeView { int (**x1)(); }*)arg1 stylesheet:(struct shared_ptr<gss::StyleManager> { struct StyleManager {} *x1; struct __shared_weak_count {} *x2; })arg2;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (id)overlays;
- (id)persistentOverlays;
- (void)polyline:(id)arg1 selectedSections:(id)arg2 deselectedSections:(id)arg3;
- (void)polylineGroup:(id)arg1 didAddPolyline:(id)arg2;
- (void)polylineGroup:(id)arg1 didRemovePolyline:(id)arg2;
- (void)polylineGroup:(id)arg1 didSelectPolyline:(id)arg2;
- (void)removeLine:(id)arg1;
- (void)removeOverlay:(id)arg1;
- (void)removePersistentOverlay:(id)arg1;
- (id)routeLineSplitAnnotation;
- (void)setDelegate:(id)arg1;
- (void)setNeedsLayoutForPolyline:(id)arg1;
- (void)setRouteLineSplitAnnotation:(id)arg1;
- (void)setSelected:(id)arg1 selected:(BOOL)arg2;
- (void)updateWithContext:(id)arg1;

@end
