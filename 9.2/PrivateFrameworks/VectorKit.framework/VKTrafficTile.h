/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKTrafficTile : VKVectorTile {
    struct TrafficMeshStyle { 
        int _style[4]; 
    }  _builtTrafficStyle;
    NSData * _data;
    struct _GEOTileKey { 
        unsigned int z : 6; 
        unsigned int x : 26; 
        unsigned int y : 26; 
        unsigned int type : 6; 
        unsigned int pixelSize : 8; 
        unsigned int textScale : 8; 
        unsigned int provider : 8; 
        unsigned int expires : 1; 
        unsigned int reserved1 : 7; 
        unsigned char reserved2[4]; 
    }  _dataKey;
    VKTileKeyMap * _dynamicTiles;
    NSMutableArray * _incidents;
    struct unordered_map<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > >, std::__1::hash<vk::TrafficBatchKey>, std::__1::equal_to<vk::TrafficBatchKey>, std::__1::allocator<std::__1::pair<const vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > > > > { struct __hash_table<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, std::__1::__unordered_map_hasher<vk::TrafficBatchKey, std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, std::__1::hash<vk::TrafficBatchKey>, true>, std::__1::__unordered_map_equal<vk::TrafficBatchKey, std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, std::__1::equal_to<vk::TrafficBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, void *> *> > { unsigned long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, void *> *> { struct __hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<vk::TrafficBatchKey, std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, std::__1::hash<vk::TrafficBatchKey>, true> > { unsigned long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<vk::TrafficBatchKey, std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, std::__1::equal_to<vk::TrafficBatchKey>, true> > { float x_4_2_1; } x_1_1_4; } x1; } * _pilledTrafficCollection;
    struct unique_ptr<vk::TrafficLayer<ggl::PilledTrafficRibbonDescriptor>, std::__1::default_delete<vk::TrafficLayer<ggl::PilledTrafficRibbonDescriptor> > > { 
        struct __compressed_pair<vk::TrafficLayer<ggl::PilledTrafficRibbonDescriptor> *, std::__1::default_delete<vk::TrafficLayer<ggl::PilledTrafficRibbonDescriptor> > > { 
            struct TrafficLayer<ggl::PilledTrafficRibbonDescriptor> {} *__first_; 
        } __ptr_; 
    }  _pilledTrafficLayer;
    struct unordered_map<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > >, std::__1::hash<vk::TrafficBatchKey>, std::__1::equal_to<vk::TrafficBatchKey>, std::__1::allocator<std::__1::pair<const vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > > > > { struct __hash_table<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, std::__1::__unordered_map_hasher<vk::TrafficBatchKey, std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, std::__1::hash<vk::TrafficBatchKey>, true>, std::__1::__unordered_map_equal<vk::TrafficBatchKey, std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, std::__1::equal_to<vk::TrafficBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, void *> *> > { unsigned long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, void *> *> { struct __hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<vk::TrafficBatchKey, std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, std::__1::hash<vk::TrafficBatchKey>, true> > { unsigned long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<vk::TrafficBatchKey, std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, std::__1::equal_to<vk::TrafficBatchKey>, true> > { float x_4_2_1; } x_1_1_4; } x1; } * _solidTrafficCollection;
    struct unique_ptr<vk::TrafficLayer<ggl::SolidTrafficRibbonDescriptor>, std::__1::default_delete<vk::TrafficLayer<ggl::SolidTrafficRibbonDescriptor> > > { 
        struct __compressed_pair<vk::TrafficLayer<ggl::SolidTrafficRibbonDescriptor> *, std::__1::default_delete<vk::TrafficLayer<ggl::SolidTrafficRibbonDescriptor> > > { 
            struct TrafficLayer<ggl::SolidTrafficRibbonDescriptor> {} *__first_; 
        } __ptr_; 
    }  _solidTrafficLayer;
    struct FeatureAttributeSet { 
        struct vector<gss::FeatureAttributePair, std::__1::allocator<gss::FeatureAttributePair> > { 
            struct FeatureAttributePair {} *__begin_; 
            struct FeatureAttributePair {} *__end_; 
            struct __compressed_pair<gss::FeatureAttributePair *, std::__1::allocator<gss::FeatureAttributePair> > { 
                struct FeatureAttributePair {} *__first_; 
            } __end_cap_; 
        } _attributes; 
    }  _styleAttributes;
    struct TrafficSkeletonTile { 
        struct vector<zilch::TrafficSkeletonTile::Record, std::__1::allocator<zilch::TrafficSkeletonTile::Record> > { 
            struct Record {} *__begin_; 
            struct Record {} *__end_; 
            struct __compressed_pair<zilch::TrafficSkeletonTile::Record *, std::__1::allocator<zilch::TrafficSkeletonTile::Record> > { 
                struct Record {} *__first_; 
            } __end_cap_; 
        } m_records; 
    }  _trafficData;
}

@property (nonatomic) const struct _GEOTileKey { unsigned int x1 : 6; unsigned int x2 : 26; unsigned int x3 : 26; unsigned int x4 : 6; unsigned int x5 : 8; unsigned int x6 : 8; unsigned int x7 : 8; unsigned int x8 : 1; unsigned int x9 : 7; unsigned char x10[4]; }*dataKey;
@property (nonatomic, readonly) VKTileKeyMap *dynamicTiles;
@property (nonatomic, readonly) NSArray *incidents;
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{TrafficLayer<ggl::PilledTrafficRibbonDescriptor>=^^?{vector<vk::PilledTrafficBatch *' */ struct *pilledTrafficLayer; /* unknown property attribute:  std::__1::allocator<ggl::OptimizedTraffic::BaseMesh *> >=^^{BaseMesh}}}[1^{RenderState}]{shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> >=^{ConstantDataTyped<ggl::Tile::View>}^{__shared_weak_count}}[1{shared_ptr<ggl::RenderState>=^{RenderState}^{__shared_weak_count}}]I^{TrafficManager<ggl::PilledTrafficRibbonDescriptor>}@} */
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{TrafficLayer<ggl::SolidTrafficRibbonDescriptor>=^^?{vector<vk::SolidTrafficBatch *' */ struct *solidTrafficLayer; /* unknown property attribute:  std::__1::allocator<ggl::TrafficBase::BaseMesh *> >=^^{BaseMesh}}}[2^{RenderState}]{shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> >=^{ConstantDataTyped<ggl::Tile::View>}^{__shared_weak_count}}[2{shared_ptr<ggl::RenderState>=^{RenderState}^{__shared_weak_count}}]I^{TrafficManager<ggl::SolidTrafficRibbonDescriptor>}@} */
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{FeatureAttributeSet={vector<gss::FeatureAttributePair' */ struct *styleAttributes; /* unknown property attribute:  std::__1::allocator<gss::FeatureAttributePair> >=^{FeatureAttributePair}}}} */

- (id).cxx_construct;
- (void).cxx_destruct;
- (BOOL)_buildStartOffset:(float*)arg1 endOffset:(float*)arg2 forLine:(struct { struct { id x_1_1_1; unsigned int x_1_1_2; unsigned int x_1_1_3; unsigned int x_1_1_4; unsigned int x_1_1_5; unsigned int x_1_1_6; unsigned long long x_1_1_7; BOOL x_1_1_8; unsigned long long x_1_1_9; float x_1_1_10; unsigned long long x_1_1_11; id x_1_1_12; } x1; unsigned int x2; unsigned int x3; int x4; int x5; int x6; unsigned int x7; unsigned int x8; union { struct { struct { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_9_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; float x_2_2_4; } x_9_1_2; } x9; struct { /* ? */ } *x10; struct { unsigned short x_11_1_1[2]; unsigned short x_11_1_2[2]; } x11; unsigned char x12; struct _NSRange { unsigned int x_13_1_1; unsigned int x_13_1_2; } x13; BOOL x14; }*)arg3 forSkeleton:(const struct Record { unsigned int x1; unsigned int x2; float x3; float x4; long long x5; int x6; float x7; float x8; int x9; }*)arg4 forRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg5 forFlow:(const struct Flow { long long x1; float x2; float x3; int x4; }*)arg6 forPoints:(struct Matrix<float, 2, 1> { float x1[2]; }*)arg7;
- (void)buildIncidentsForDynamic:(id)arg1 withRoadData:(id)arg2;
- (void)buildSkeletonMap;
- (void)buildTrafficIncidentsWithRoadData:(id)arg1;
- (void)buildTrafficMeshWithRoadData:(id)arg1 dynamicTile:(id)arg2 trafficAccum:(struct TrafficAccum { int x1; struct vector<gm::Matrix<float, 2, 1>, std::__1::allocator<gm::Matrix<float, 2, 1> > > { struct Matrix<float, 2, 1> {} *x_2_1_1; struct Matrix<float, 2, 1> {} *x_2_1_2; struct __compressed_pair<gm::Matrix<float, 2, 1> *, std::__1::allocator<gm::Matrix<float, 2, 1> > > { struct Matrix<float, 2, 1> {} *x_3_2_1; } x_2_1_3; } x2; unsigned char x3; int x4; int x5; struct unordered_map<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > >, std::__1::hash<vk::TrafficBatchKey>, std::__1::equal_to<vk::TrafficBatchKey>, std::__1::allocator<std::__1::pair<const vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > > > > {} *x6; struct unordered_map<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > >, std::__1::hash<vk::TrafficBatchKey>, std::__1::equal_to<vk::TrafficBatchKey>, std::__1::allocator<std::__1::pair<const vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > > > > {} *x7; int x8; struct { /* ? */ } *x9; struct shared_ptr<gss::StyleQuery> { struct StyleQuery {} *x_10_1_1; struct __shared_weak_count {} *x_10_1_2; } x10; int x11; float x12; }*)arg3 styleSession:(struct StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > { struct shared_ptr<gss::StyleManager> { struct StyleManager {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; struct unordered_map<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<std::__1::shared_ptr<gss::StyleQuery> >, std::__1::equal_to<std::__1::shared_ptr<gss::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > > { struct __hash_table<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::__unordered_map_hasher<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::hash<std::__1::shared_ptr<gss::StyleQuery> >, true>, std::__1::__unordered_map_equal<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::equal_to<std::__1::shared_ptr<gss::StyleQuery> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *> > { unsigned long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *> { struct __hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::hash<std::__1::shared_ptr<gss::StyleQuery> >, true> > { unsigned long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::equal_to<std::__1::shared_ptr<gss::StyleQuery> >, true> > { float x_4_3_1; } x_1_2_4; } x_2_1_1; } x2; bool x3; unsigned char x4; }*)arg4 trafficMeshStyle:(const struct TrafficMeshStyle { int x1[4]; }*)arg5;
- (void)buildTrafficMeshWithRoadData:(id)arg1 withLoader:(struct Loader { struct unique_ptr<ggl::LoaderImpl, std::__1::default_delete<ggl::LoaderImpl> > { struct __compressed_pair<ggl::LoaderImpl *, std::__1::default_delete<ggl::LoaderImpl> > { struct LoaderImpl {} *x_1_2_1; } x_1_1_1; } x1; }*)arg2 trafficMeshStyle:(const struct TrafficMeshStyle { int x1[4]; }*)arg3;
- (const struct TrafficMeshStyle { int x1[4]; }*)builtTrafficStyle;
- (const struct _GEOTileKey { unsigned int x1 : 6; unsigned int x2 : 26; unsigned int x3 : 26; unsigned int x4 : 6; unsigned int x5 : 8; unsigned int x6 : 8; unsigned int x7 : 8; unsigned int x8 : 1; unsigned int x9 : 7; unsigned char x10[4]; }*)dataKey;
- (void)dealloc;
- (id)dynamicTiles;
- (void)enumerateTrafficRoadPiecesForTile:(id)arg1 usingFunction:(const struct function<void (const vk::RoadPiece &)>={type=[12C] {}*)arg2;
- (id)incidents;
- (id)initWithKey:(const struct VKTileKey { unsigned int x1; int x2; int x3; unsigned int x4; }*)arg1 downloadKey:(const struct _GEOTileKey { unsigned int x1 : 6; unsigned int x2 : 26; unsigned int x3 : 26; unsigned int x4 : 6; unsigned int x5 : 8; unsigned int x6 : 8; unsigned int x7 : 8; unsigned int x8 : 1; unsigned int x9 : 7; unsigned char x10[4]; }*)arg2 data:(id)arg3 styleManager:(struct shared_ptr<gss::StyleManager> { struct StyleManager {} *x1; struct __shared_weak_count {} *x2; })arg4 sharedResources:(id)arg5 contentScale:(float)arg6 device:(struct Device { int (**x1)(); int x2; }*)arg7;
- (struct TrafficLayer<ggl::PilledTrafficRibbonDescriptor> { int (**x1)(); struct vector<vk::PilledTrafficBatch *, std::__1::allocator<vk::PilledTrafficBatch *> > { struct PilledTrafficBatch {} **x_2_1_1; struct PilledTrafficBatch {} **x_2_1_2; struct __compressed_pair<vk::PilledTrafficBatch **, std::__1::allocator<vk::PilledTrafficBatch *> > { struct PilledTrafficBatch {} **x_3_2_1; } x_2_1_3; } x2; struct vector<ggl::OptimizedTraffic::BaseMesh *, std::__1::allocator<ggl::OptimizedTraffic::BaseMesh *> > { struct BaseMesh {} **x_3_1_1; struct BaseMesh {} **x_3_1_2; struct __compressed_pair<ggl::OptimizedTraffic::BaseMesh **, std::__1::allocator<ggl::OptimizedTraffic::BaseMesh *> > { struct BaseMesh {} **x_3_2_1; } x_3_1_3; } x3; struct RenderState {} *x4[1]; struct shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> > { struct ConstantDataTyped<ggl::Tile::View> {} *x_5_1_1; struct __shared_weak_count {} *x_5_1_2; } x5; struct shared_ptr<ggl::RenderState> { struct RenderState {} *x_6_1_1; struct __shared_weak_count {} *x_6_1_2; } x6[1]; unsigned int x7; struct TrafficManager<ggl::PilledTrafficRibbonDescriptor> {} *x8; id x9; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x10; void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; void x28; out int x29; double x30; void*x31; char *x32; void*x33; void*x34; char *x35; void*x36; void*x37; void*x38; void*x39; struct x40; void*x41; short x42; void*x43; void*x44; void*x45; const void*x46; void*x47; void*x48; BOOL x49; void*x50; void*x51; void*x52; void*x53; void*x54; void*x55; void*x56; void*x57; void*x58; BOOL x59; void*x60; out void*x61; void*x62; void*x63; void*x64; void*x65; const void*x66; void*x67; void*x68; short x69; void*x70; short x71; void*x72; void*x73; void*x74; double x75; void*x76; void*x77; void*x78; void*x79; void*x80; void*x81; void*x82; int x83; void*x84; const void*x85; void*x86; void*x87; short x88; void*x89; void*x90; void*x91; double x92; void*x93; SEL x94; void*x95; SEL x96; void*x97; void*x98; void*x99; void*x100; void*x101; void*x102; void*x103; SEL x104; void*x105; SEL x106; void*x107; void*x108; void*x109; void*x110; void*x111; void*x112; void*x113; void*x114; void*x115; short x116; void*x117; void*x118; void*x119; void*x120; void*x121; in void*x122; out void*x123; double x124; void*x125; void*x126; void*x127; void*x128; void*x129; unsigned int x130/* : ? */; void*x131; void*x132; void*x133; short x134; void*x135; void*x136; void*x137; void*x138; void*x139; short x140; void*x141; void*x142; void*x143; double x144; void*x145; SEL x146; void*x147; SEL x148; void*x149; void*x150; void*x151; void*x152; void*x153; void*x154; void*x155; SEL x156; void*x157; SEL x158; void*x159; void*x160; void*x161; void*x162; void*x163; void*x164; void*x165; void*x166; void*x167; short x168; void*x169; void*x170; void*x171; void*x172; void*x173; in void*x174; out void*x175; double x176; void*x177; void*x178; void*x179; void*x180; void*x181; short x182; void*x183; void*x184; void*x185; double x186; void*x187; SEL x188; void*x189; SEL x190; void*x191; void*x192; void*x193; void*x194; void*x195; void*x196; void*x197; SEL x198; void*x199; SEL x200; void*x201; void*x202; void*x203; void*x204; void*x205; void*x206; void*x207; void*x208; void*x209; short x210; void*x211; void*x212; void*x213; void*x214; void*x215; void x216; void*x217; void*x218; void*x219; long x220; void*x221; void*x222; void*x223; void*x224; void*x225; void*x226; void*x227; void*x228; void*x229; void*x230; void*x231; void*x232; void*x233; void*x234; void*x235; void*x236; void*x237; short x238; void*x239; void*x240; void*x241; double x242; void*x243; SEL x244; void*x245; SEL x246; void*x247; void*x248; void*x249; void*x250; void*x251; void*x252; void*x253; SEL x254; void*x255; SEL x256; void*x257; short x258; void*x259; void*x260; void*x261; void*x262; void*x263; const void*x264; void*x265; void*x266; double x267; void*x268; void*x269; void*x270; void*x271; void*x272; void*x273; void*x274; const void*x275; void*x276; void*x277; void*x278; void*x279; short x280; void*x281; short x282; void*x283; SEL x284; void*x285; SEL x286; void*x287; unsigned short x288; void*x289; void*x290; void*x291; void*x292; void*x293; long x294; void*x295; void*x296; void*x297; unsigned long long x298; void*x299; void*x300; void*x301; void*x302; void*x303; const void*x304; void*x305; void*x306; void*x307; void*x308; void*x309; void*x310; void*x311; void*x312; void*x313; void*x314; void*x315; void*x316; out void*x317; SEL x318; void*x319; SEL x320; void*x321; void*x322; void*x323; const void*x324; void*x325; void*x326; void*x327; void*x328; void*x329; void*x330; int x331; void*x332; in void*x333; void*x334; void*x335; void*x336; void*x337; void*x338; void*x339; const void*x340; void*x341; void*x342; int x343; void*x344; double x345; void*x346; void*x347; void*x348; void*x349; void*x350; void*x351; void*x352; void*x353; void*x354; out void*x355; SEL x356; void*x357; SEL x358; void*x359; void*x360; void*x361; const void*x362; void*x363; void*x364; void*x365; void*x366; void*x367; void*x368; int x369; void*x370; in void*x371; void*x372; void*x373; out void*x374; unsigned int x375/* : ? */; void*x376; void*x377; void*x378; BOOL x379; void*x380; void*x381; void*x382; void*x383; void*x384; void*x385; void*x386; void*x387; void*x388; out void*x389; SEL x390; void*x391; SEL x392; void*x393; void*x394; void*x395; const void*x396; void*x397; void*x398; long x399; void*x400; void*x401; void*x402; void*x403; void*x404; short x405; void*x406; void*x407; void*x408; void*x409; void*x410; out void*x411; unsigned int x412/* : ? */; void*x413; void*x414; void*x415; BOOL x416; void*x417; void*x418; void*x419; void*x420; void*x421; void*x422; void*x423; void*x424; void*x425; out void*x426; SEL x427; void*x428; SEL x429; void*x430; void*x431; void*x432; void*x433; void*x434; void*x435; void*x436; short x437; void*x438; void*x439; void*x440; void*x441; void*x442; out void*x443; unsigned int x444/* : ? */; void*x445; void*x446; void*x447; BOOL x448; void*x449; void*x450; void*x451; void*x452; void*x453; void*x454; void*x455; void*x456; void*x457; out void*x458; SEL x459; void*x460; SEL x461; void*x462; void*x463; void*x464; void*x465; void*x466; long long x467; void*x468; void*x469; void*x470; void*x471; void*x472; long x473; void*x474; void*x475; void*x476; out void*x477; unsigned int x478/* : ? */; void*x479; void*x480; void*x481; BOOL x482; void*x483; void*x484; void*x485; void*x486; void*x487; void*x488; void*x489; void*x490; void*x491; void*x492; void*x493; void x494; void*x495; out void*x496; int x497; void*x498; double x499; void*x500; void*x501; void*x502; char *x503; void*x504; void*x505; void*x506; void*x507; void*x508; char *x509; void*x510; void*x511; void*x512; void*x513; void*x514; void*x515; void*x516; short x517; void*x518; void*x519; void*x520; double x521; void*x522; SEL x523; void*x524; SEL x525; void*x526; void*x527; void*x528; void*x529; void*x530; void*x531; void*x532; SEL x533; void*x534; SEL x535; void*x536; void*x537; void*x538; long x539; void*x540; long x541; void*x542; out void*x543; BOOL x544; void*x545; void*x546; void*x547; void*x548; void*x549; out void*x550; const void*x551; void*x552; void*x553; short x554; void*x555; void*x556; void*x557; double x558; void*x559; SEL x560; void*x561; SEL x562; void*x563; void*x564; void*x565; void*x566; void*x567; void*x568; void*x569; SEL x570; void*x571; SEL x572; void*x573; void*x574; void*x575; void*x576; void*x577; void*x578; void*x579; void*x580; void*x581; short x582; void*x583; void*x584; void*x585; void*x586; void*x587; in void*x588; out void*x589; double x590; void*x591; void*x592; void*x593; void*x594; void*x595; short x596; void*x597; void*x598; void*x599; double x600; void*x601; SEL x602; void*x603; SEL x604; void*x605; void*x606; void*x607; void*x608; void*x609; void*x610; void*x611; SEL x612; void*x613; SEL x614; void*x615; void*x616; void*x617; void*x618; void*x619; void*x620; void*x621; void*x622; void*x623; short x624; void*x625; void*x626; void*x627; void*x628; void*x629; void x630; void*x631; void*x632; void*x633; long x634; void*x635; void*x636; void*x637; void*x638; void*x639; void*x640; void*x641; void*x642; void*x643; void*x644; void*x645; void*x646; void*x647; void*x648; void*x649; void*x650; void*x651; short x652; void*x653; void*x654; void*x655; double x656; void*x657; SEL x658; void*x659; SEL x660; void*x661; void*x662; void*x663; void*x664; void*x665; void*x666; void*x667; SEL x668; void*x669; SEL x670; void*x671; short x672; void*x673; void*x674; void*x675; void*x676; void*x677; const void*x678; void*x679; void*x680; double x681; void*x682; void*x683; void*x684; void*x685; void*x686; void*x687; void*x688; const void*x689; void*x690; void*x691; void*x692; void*x693; short x694; void*x695; short x696; void*x697; SEL x698; void*x699; SEL x700; void*x701; unsigned short x702; void*x703; void*x704; void*x705; void*x706; void*x707; long x708; void*x709; void*x710; void*x711; unsigned long long x712; void*x713; void*x714; void*x715; void*x716; void*x717; const void*x718; void*x719; void*x720; void*x721; void*x722; void*x723; void*x724; void*x725; void*x726; void*x727; void*x728; void*x729; void*x730; out void*x731; SEL x732; void*x733; SEL x734; void*x735; void*x736; void*x737; const void*x738; void*x739; void*x740; void*x741; void*x742; void*x743; void*x744; int x745; void*x746; in void*x747; void*x748; void*x749; void*x750; void*x751; void*x752; void*x753; const void*x754; void*x755; void*x756; int x757; void*x758; double x759; void*x760; void*x761; void*x762; void*x763; void*x764; void*x765; void*x766; void*x767; void*x768; out void*x769; SEL x770; void*x771; SEL x772; void*x773; void*x774; void*x775; const void*x776; void*x777; void*x778; void*x779; void*x780; void*x781; void*x782; int x783; void*x784; in void*x785; void*x786; void*x787; out void*x788; unsigned int x789/* : ? */; void*x790; void*x791; void*x792; BOOL x793; void*x794; void*x795; void*x796; void*x797; void*x798; void*x799; void*x800; void*x801; void*x802; out void*x803; SEL x804; void*x805; SEL x806; void*x807; void*x808; void*x809; const void*x810; void*x811; void*x812; long x813; void*x814; void*x815; void*x816; void*x817; void*x818; short x819; void*x820; void*x821; void*x822; void*x823; void*x824; out void*x825; unsigned int x826/* : ? */; void*x827; void*x828; void*x829; BOOL x830; void*x831; void*x832; void*x833; void*x834; void*x835; void*x836; void*x837; void*x838; void*x839; out void*x840; SEL x841; void*x842; SEL x843; void*x844; void*x845; void*x846; void*x847; void*x848; void*x849; void*x850; short x851; void*x852; void*x853; void*x854; void*x855; void*x856; out void*x857; unsigned int x858/* : ? */; void*x859; void*x860; void*x861; BOOL x862; void*x863; void*x864; void*x865; void*x866; void*x867; void*x868; void*x869; void*x870; void*x871; out void*x872; SEL x873; void*x874; SEL x875; void*x876; void*x877; void*x878; void*x879; void*x880; long long x881; void*x882; void*x883; void*x884; void*x885; void*x886; long x887; void*x888; void*x889; void*x890; out void*x891; unsigned int x892/* : ? */; void*x893; void*x894; void*x895; BOOL x896; void*x897; void*x898; void*x899; void*x900; void*x901; void*x902; void*x903; void*x904; void*x905; void*x906; void*x907; void x908; void*x909; out void*x910; int x911; void*x912; double x913; void*x914; void*x915; void*x916; char *x917; void*x918; void*x919; void*x920; void*x921; void*x922; void*x923; void*x924; void*x925; void*x926; void*x927; void*x928; void*x929; void*x930; struct x931; void*x932; void*x933; void*x934; short x935; void*x936; void*x937; void*x938; const void*x939; void*x940; void*x941; BOOL x942; void*x943; void*x944; void*x945; void*x946; void*x947; void*x948; void*x949; void*x950; void*x951; void*x952; void*x953; void*x954; void*x955; short x956; void*x957; void*x958; void*x959; void*x960; void*x961; in void*x962; out void*x963; double x964; void*x965; void*x966; void*x967; void*x968; void*x969; unsigned int x970/* : ? */; void*x971; void*x972; void*x973; short x974; void*x975; void*x976; void*x977; void*x978; void*x979; short x980; void*x981; void*x982; void*x983; double x984; void*x985; SEL x986; void*x987; SEL x988; void*x989; void*x990; void*x991; void*x992; void*x993; void*x994; void*x995; SEL x996; void*x997; SEL x998; void*x999; void*x1000; void*x1001; void*x1002; void*x1003; void*x1004; void*x1005; void*x1006; void*x1007; short x1008; void*x1009; void*x1010; void*x1011; void*x1012; void*x1013; in void*x1014; out void*x1015; double x1016; void*x1017; void*x1018; void*x1019; void*x1020; void*x1021; short x1022; void*x1023; void*x1024; void*x1025; double x1026; void*x1027; SEL x1028; void*x1029; SEL x1030; void*x1031; void*x1032; void*x1033; void*x1034; void*x1035; void*x1036; void*x1037; SEL x1038; void*x1039; SEL x1040; void*x1041; void*x1042; void*x1043; void*x1044; void*x1045; void*x1046; void*x1047; void*x1048; void*x1049; short x1050; void*x1051; void*x1052; void*x1053; void*x1054; void*x1055; void x1056; void*x1057; void*x1058; void*x1059; long x1060; void*x1061; void*x1062; void*x1063; void*x1064; void*x1065; void*x1066; void*x1067; void*x1068; void*x1069; void*x1070; void*x1071; void*x1072; void*x1073; void*x1074; void*x1075; void*x1076; void*x1077; short x1078; void*x1079; void*x1080; void*x1081; double x1082; void*x1083; SEL x1084; void*x1085; SEL x1086; void*x1087; void*x1088; void*x1089; void*x1090; void*x1091; void*x1092; void*x1093; SEL x1094; void*x1095; SEL x1096; void*x1097; short x1098; void*x1099; void*x1100; void*x1101; void*x1102; void*x1103; const void*x1104; void*x1105; void*x1106; double x1107; void*x1108; void*x1109; void*x1110; void*x1111; void*x1112; void*x1113; void*x1114; const void*x1115; void*x1116; void*x1117; void*x1118; void*x1119; short x1120; void*x1121; short x1122; void*x1123; SEL x1124; void*x1125; SEL x1126; void*x1127; unsigned short x1128; void*x1129; void*x1130; void*x1131; void*x1132; void*x1133; long x1134; void*x1135; void*x1136; void*x1137; unsigned long long x1138; void*x1139; void*x1140; void*x1141; void*x1142; void*x1143; const void*x1144; void*x1145; void*x1146; void*x1147; void*x1148; void*x1149; void*x1150; void*x1151; void*x1152; void*x1153; void*x1154; void*x1155; void*x1156; out void*x1157; SEL x1158; void*x1159; SEL x1160; void*x1161; void*x1162; void*x1163; const void*x1164; void*x1165; void*x1166; void*x1167; void*x1168; void*x1169; void*x1170; int x1171; void*x1172; in void*x1173; void*x1174; void*x1175; void*x1176; void*x1177; void*x1178; void*x1179; const void*x1180; void*x1181; void*x1182; int x1183; void*x1184; double x1185; void*x1186; void*x1187; void*x1188; void*x1189; void*x1190; void*x1191; void*x1192; void*x1193; void*x1194; out void*x1195; SEL x1196; void*x1197; SEL x1198; void*x1199; void*x1200; void*x1201; const void*x1202; void*x1203; void*x1204; void*x1205; void*x1206; void*x1207; void*x1208; int x1209; void*x1210; in void*x1211; void*x1212; void*x1213; out void*x1214; unsigned int x1215/* : ? */; void*x1216; void*x1217; void*x1218; BOOL x1219; void*x1220; void*x1221; void*x1222; void*x1223; void*x1224; void*x1225; void*x1226; void*x1227; void*x1228; out void*x1229; SEL x1230; void*x1231; SEL x1232; void*x1233; void*x1234; void*x1235; const void*x1236; void*x1237; void*x1238; long x1239; void*x1240; void*x1241; void*x1242; void*x1243; void*x1244; short x1245; void*x1246; void*x1247; void*x1248; void*x1249; void*x1250; out void*x1251; unsigned int x1252/* : ? */; void*x1253; void*x1254; void*x1255; BOOL x1256; void*x1257; void*x1258; void*x1259; void*x1260; void*x1261; void*x1262; void*x1263; void*x1264; void*x1265; out void*x1266; SEL x1267; void*x1268; SEL x1269; void*x1270; void*x1271; void*x1272; void*x1273; void*x1274; void*x1275; void*x1276; short x1277; void*x1278; void*x1279; void*x1280; void*x1281; void*x1282; out void*x1283; unsigned int x1284/* : ? */; void*x1285; void*x1286; void*x1287; BOOL x1288; void*x1289; void*x1290; void*x1291; void*x1292; void*x1293; void*x1294; void*x1295; void*x1296; void*x1297; out void*x1298; SEL x1299; void*x1300; SEL x1301; void*x1302; void*x1303; void*x1304; void*x1305; void*x1306; long long x1307; void*x1308; void*x1309; void*x1310; void*x1311; void*x1312; long x1313; void*x1314; void*x1315; void*x1316; out void*x1317; unsigned int x1318/* : ? */; void*x1319; void*x1320; void*x1321; BOOL x1322; void*x1323; void*x1324; void*x1325; void*x1326; void*x1327; void*x1328; void*x1329; void*x1330; void*x1331; void*x1332; void*x1333; void x1334; void*x1335; out void*x1336; int x1337; void*x1338; double x1339; void*x1340; void*x1341; void*x1342; char *x1343; void*x1344; void*x1345; void*x1346; void*x1347; void*x1348; char *x1349; void*x1350; void*x1351; void*x1352; void*x1353; void*x1354; struct x1355; void*x1356; void*x1357; void*x1358; short x1359; void*x1360; void*x1361; void*x1362; const void*x1363; void*x1364; void*x1365; BOOL x1366; void*x1367; void*x1368; void*x1369; void*x1370; void*x1371; void*x1372; void*x1373; void*x1374; void*x1375; void*x1376; void*x1377; void*x1378; void*x1379; short x1380; void*x1381; void*x1382; void*x1383; void*x1384; void*x1385; in void*x1386; out void*x1387; double x1388; void*x1389; void*x1390; void*x1391; void*x1392; void*x1393; short x1394; void*x1395; void*x1396; void*x1397; double x1398; void*x1399; SEL x1400; void*x1401; SEL x1402; void*x1403; void*x1404; void*x1405; void*x1406; void*x1407; void*x1408; void*x1409; SEL x1410; void*x1411; SEL x1412; void*x1413; void*x1414; void*x1415; void*x1416; void*x1417; void*x1418; void*x1419; void*x1420; void*x1421; short x1422; void*x1423; void*x1424; void*x1425; void*x1426; void*x1427; void x1428; void*x1429; void*x1430; void*x1431; long x1432; void*x1433; void*x1434; void*x1435; void*x1436; void*x1437; void*x1438; void*x1439; void*x1440; void*x1441; void*x1442; void*x1443; void*x1444; void*x1445; void*x1446; void*x1447; void*x1448; void*x1449; short x1450; void*x1451; void*x1452; void*x1453; double x1454; void*x1455; SEL x1456; void*x1457; SEL x1458; void*x1459; void*x1460; void*x1461; void*x1462; void*x1463; void*x1464; void*x1465; SEL x1466; void*x1467; SEL x1468; void*x1469; short x1470; void*x1471; void*x1472; void*x1473; void*x1474; void*x1475; const void*x1476; void*x1477; void*x1478; double x1479; void*x1480; void*x1481; void*x1482; void*x1483; void*x1484; void*x1485; void*x1486; const void*x1487; void*x1488; void*x1489; void*x1490; void*x1491; short x1492; void*x1493; short x1494; void*x1495; SEL x1496; void*x1497; SEL x1498; void*x1499; unsigned short x1500; void*x1501; void*x1502; void*x1503; void*x1504; void*x1505; long x1506; void*x1507; void*x1508; void*x1509; unsigned long long x1510; void*x1511; void*x1512; void*x1513; void*x1514; void*x1515; const void*x1516; void*x1517; void*x1518; void*x1519; void*x1520; void*x1521; void*x1522; void*x1523; void*x1524; void*x1525; void*x1526; void*x1527; void*x1528; out void*x1529; SEL x1530; void*x1531; SEL x1532; void*x1533; void*x1534; void*x1535; const void*x1536; void*x1537; void*x1538; void*x1539; void*x1540; void*x1541; void*x1542; int x1543; void*x1544; in void*x1545; void*x1546; void*x1547; void*x1548; void*x1549; void*x1550; void*x1551; const void*x1552; void*x1553; void*x1554; int x1555; void*x1556; double x1557; void*x1558; void*x1559; void*x1560; void*x1561; void*x1562; void*x1563; void*x1564; void*x1565; void*x1566; out void*x1567; SEL x1568; void*x1569; SEL x1570; void*x1571; void*x1572; void*x1573; const void*x1574; void*x1575; void*x1576; void*x1577; void*x1578; void*x1579; void*x1580; int x1581; void*x1582; in void*x1583; void*x1584; void*x1585; out void*x1586; unsigned int x1587/* : ? */; void*x1588; void*x1589; void*x1590; BOOL x1591; void*x1592; void*x1593; void*x1594; void*x1595; void*x1596; void*x1597; void*x1598; void*x1599; void*x1600; out void*x1601; SEL x1602; void*x1603; SEL x1604; void*x1605; void*x1606; void*x1607; const void*x1608; void*x1609; void*x1610; long x1611; void*x1612; void*x1613; void*x1614; void*x1615; void*x1616; short x1617; void*x1618; void*x1619; void*x1620; void*x1621; void*x1622; out void*x1623; unsigned int x1624/* : ? */; void*x1625; void*x1626; void*x1627; BOOL x1628; void*x1629; void*x1630; void*x1631; void*x1632; void*x1633; void*x1634; void*x1635; void*x1636; void*x1637; out void*x1638; SEL x1639; void*x1640; SEL x1641; void*x1642; void*x1643; void*x1644; void*x1645; void*x1646; void*x1647; void*x1648; short x1649; void*x1650; void*x1651; void*x1652; void*x1653; void*x1654; out void*x1655; unsigned int x1656/* : ? */; void*x1657; void*x1658; void*x1659; BOOL x1660; void*x1661; void*x1662; void*x1663; void*x1664; void*x1665; void*x1666; void*x1667; void*x1668; void*x1669; out void*x1670; SEL x1671; void*x1672; SEL x1673; void*x1674; void*x1675; void*x1676; void*x1677; void*x1678; long long x1679; void*x1680; void*x1681; void*x1682; void*x1683; void*x1684; long x1685; void*x1686; void*x1687; void*x1688; out void*x1689; unsigned int x1690/* : ? */; void*x1691; void*x1692; void*x1693; BOOL x1694; void*x1695; void*x1696; void*x1697; void*x1698; void*x1699; void*x1700; void*x1701; void*x1702; void*x1703; void*x1704; void*x1705; void x1706; void*x1707; out void*x1708; int x1709; void*x1710; double x1711; void*x1712; void*x1713; void*x1714; char *x1715; void*x1716; void*x1717; void*x1718; void*x1719; void*x1720; struct x1721; void*x1722; }*)pilledTrafficLayer;
- (void)setDataKey:(const struct _GEOTileKey { unsigned int x1 : 6; unsigned int x2 : 26; unsigned int x3 : 26; unsigned int x4 : 6; unsigned int x5 : 8; unsigned int x6 : 8; unsigned int x7 : 8; unsigned int x8 : 1; unsigned int x9 : 7; unsigned char x10[4]; }*)arg1;
- (void)setupStyleAttributesWithRoadData:(id)arg1;
- (struct TrafficLayer<ggl::SolidTrafficRibbonDescriptor> { int (**x1)(); struct vector<vk::SolidTrafficBatch *, std::__1::allocator<vk::SolidTrafficBatch *> > { struct SolidTrafficBatch {} **x_2_1_1; struct SolidTrafficBatch {} **x_2_1_2; struct __compressed_pair<vk::SolidTrafficBatch **, std::__1::allocator<vk::SolidTrafficBatch *> > { struct SolidTrafficBatch {} **x_3_2_1; } x_2_1_3; } x2; struct vector<ggl::TrafficBase::BaseMesh *, std::__1::allocator<ggl::TrafficBase::BaseMesh *> > { struct BaseMesh {} **x_3_1_1; struct BaseMesh {} **x_3_1_2; struct __compressed_pair<ggl::TrafficBase::BaseMesh **, std::__1::allocator<ggl::TrafficBase::BaseMesh *> > { struct BaseMesh {} **x_3_2_1; } x_3_1_3; } x3; struct RenderState {} *x4[2]; struct shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> > { struct ConstantDataTyped<ggl::Tile::View> {} *x_5_1_1; struct __shared_weak_count {} *x_5_1_2; } x5; struct shared_ptr<ggl::RenderState> { struct RenderState {} *x_6_1_1; struct __shared_weak_count {} *x_6_1_2; } x6[2]; unsigned int x7; struct TrafficManager<ggl::SolidTrafficRibbonDescriptor> {} *x8; id x9; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x10; void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; SEL x22; void*x23; SEL x24; void*x25; void*x26; void*x27; long x28; void*x29; long x30; void*x31; out void*x32; BOOL x33; void*x34; void*x35; void*x36; void*x37; void*x38; out void*x39; const void*x40; void*x41; void*x42; void*x43; void*x44; void*x45; void*x46; long x47; void*x48; SEL x49; void*x50; SEL x51; void*x52; bycopy void*x53; void*x54; void*x55; void*x56; void*x57; int x58; void*x59; void*x60; void*x61; int x62; void*x63; void*x64; void*x65; void*x66; void*x67; double x68; void*x69; void*x70; void*x71; const void*x72; void*x73; void*x74; float x75; void*x76; float x77; void*x78; int x79; void*x80; BOOL x81; void*x82; SEL x83; void*x84; SEL x85; void*x86; bool x87; void*x88; void*x89; void*x90; short x91; void*x92; void*x93; void*x94; void*x95; void*x96; void*x97; void*x98; short x99; void*x100; void*x101; void*x102; void*x103; void*x104; char *x105; void*x106; void*x107; void*x108; void*x109; void*x110; void*x111; void*x112; void*x113; void*x114; struct x115; void*x116; void*x117; void*x118; short x119; void*x120; void*x121; void*x122; const void*x123; void*x124; void*x125; BOOL x126; void*x127; void*x128; void*x129; void*x130; void*x131; bool x132; void*x133; void*x134; void*x135; short x136; void*x137; void*x138; void*x139; void*x140; void*x141; void*x142; void*x143; short x144; void*x145; void*x146; void*x147; void*x148; void*x149; struct x150; void*x151; }*)solidTrafficLayer;
- (struct FeatureAttributeSet { struct vector<gss::FeatureAttributePair, std::__1::allocator<gss::FeatureAttributePair> > { struct FeatureAttributePair {} *x_1_1_1; struct FeatureAttributePair {} *x_1_1_2; struct __compressed_pair<gss::FeatureAttributePair *, std::__1::allocator<gss::FeatureAttributePair> > { struct FeatureAttributePair {} *x_3_2_1; } x_1_1_3; } x1; }*)styleAttributes;

@end
