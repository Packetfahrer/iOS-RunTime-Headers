/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKRealisticMapModel : VKVectorMapModel <VKMapLayer> {
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup> {} *__first_; 
        } __ptr_; 
    }  _animatableRoadShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup> {} *__first_; 
        } __ptr_; 
    }  _animatableTexturedShaderSetupPool;
    struct RenderItemBatcher { 
        struct vector<ggl::Range, std::__1::allocator<ggl::Range> > { 
            struct Range {} *__begin_; 
            struct Range {} *__end_; 
            struct __compressed_pair<ggl::Range *, std::__1::allocator<ggl::Range> > { 
                struct Range {} *__first_; 
            } __end_cap_; 
        } _activeRanges; 
        unsigned int _rangePoolCount; 
        struct vector<ggl::MultiRange, std::__1::allocator<ggl::MultiRange> > { 
            struct MultiRange {} *__begin_; 
            struct MultiRange {} *__end_; 
            struct __compressed_pair<ggl::MultiRange *, std::__1::allocator<ggl::MultiRange> > { 
                struct MultiRange {} *__first_; 
            } __end_cap_; 
        } _rangePool; 
        struct vector<ggl::Range, std::__1::allocator<ggl::Range> > { 
            struct Range {} *__begin_; 
            struct Range {} *__end_; 
            struct __compressed_pair<ggl::Range *, std::__1::allocator<ggl::Range> > { 
                struct Range {} *__first_; 
            } __end_cap_; 
        } _activeRanges; 
        struct RenderItem {} *_prototype; 
        struct Pool<ggl::RenderItem> { 
            struct set<void *, std::__1::less<void *>, std::__1::allocator<void *> > { 
                struct __tree<void *, std::__1::less<void *>, std::__1::allocator<void *> > { 
                    struct __tree_node<void *, void *> {} *__begin_node_; 
                    struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<void *, void *> > > { 
                        struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                            struct __tree_node_base<void *> {} *__left_; 
                        } __first_; 
                    } __pair1_; 
                    struct __compressed_pair<unsigned long, std::__1::less<void *> > { 
                        unsigned long __first_; 
                    } __pair3_; 
                } __tree_; 
            } mAllocatedSlabs; 
            unsigned int mElementsPerSlab; 
            unsigned int mSlabSize; 
            struct FreeList {} *mFreeElement; 
        } _pool; 
        unsigned int _rangePoolCount; 
        struct vector<ggl::MultiRange, std::__1::allocator<ggl::MultiRange> > { 
            struct MultiRange {} *__begin_; 
            struct MultiRange {} *__end_; 
            struct __compressed_pair<ggl::MultiRange *, std::__1::allocator<ggl::MultiRange> > { 
                struct MultiRange {} *__first_; 
            } __end_cap_; 
        } _rangePool; 
    }  _batcher;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    }  _casingFacadeRenderItemPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    }  _casingFacadeRenderStateWithBlending;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    }  _casingFacadeRenderStateWithoutBlending;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup> {} *__first_; 
        } __ptr_; 
    }  _casingFacadeShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    }  _casingShadowRenderItemPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    }  _casingShadowRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup> {} *__first_; 
        } __ptr_; 
    }  _casingShadowShaderSetupPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    }  _casingSidewalkShadowRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> {} *__first_; 
        } __ptr_; 
    }  _casingSidewalkShadowShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    }  _casingTopRenderItemPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    }  _casingTopRenderStateWithBlending;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    }  _casingTopRenderStateWithoutBlending;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> {} *__first_; 
        } __ptr_; 
    }  _casingTopShaderSetupPool;
    struct unique_ptr<ggl::ClearItem, std::__1::default_delete<ggl::ClearItem> > { 
        struct __compressed_pair<ggl::ClearItem *, std::__1::default_delete<ggl::ClearItem> > { 
            struct ClearItem {} *__first_; 
        } __ptr_; 
    }  _clearItem;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    }  _coastlineRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    }  _debugRenderItemPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    }  _debugRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> > > { 
            struct FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> {} *__first_; 
        } __ptr_; 
    }  _debugShaderSetupPool;
    BOOL  _disableRealisticLand;
    BOOL  _disableRealisticRoads;
    double  _fade;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    }  _landRenderStateWithBlending;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    }  _landRenderStateWithoutBlending;
    bool  _needDebugReset;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    }  _roadRenderItemPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    }  _roadRenderStateWithBlending;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    }  _roadRenderStateWithoutBlending;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticRoad::Shader::Setup> {} *__first_; 
        } __ptr_; 
    }  _roadShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    }  _roadShadowRenderItemPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    }  _roadShadowRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup> {} *__first_; 
        } __ptr_; 
    }  _roadShadowShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    }  _roadStencilRenderItemPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    }  _roadStencilRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> > > { 
            struct FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> {} *__first_; 
        } __ptr_; 
    }  _roadStencilShaderSetupPool;
    <GEORoutePreloadSession> * _routePreloadSession;
    float  _sceneAlpha;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    }  _sidewalkShadowRenderItemPool;
    VKSkyModel * _skyModel;
    struct shared_ptr<gss::StyleManager> { 
        struct StyleManager {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _styleManager;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    }  _texturedRenderItemPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticTexture::Shader::Setup> {} *__first_; 
        } __ptr_; 
    }  _texturedShaderSetupPool;
    struct shared_ptr<ggl::ConstantDataTyped<ggl::AnimatableTexture::Variant> > { 
        struct ConstantDataTyped<ggl::AnimatableTexture::Variant> {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _variantData;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    }  _waterRenderStateWithBlending;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    }  _waterRenderStateWithoutBlending;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) BOOL disableRealisticLand;
@property (nonatomic) BOOL disableRealisticRoads;
@property (readonly) unsigned int hash;
@property (nonatomic, retain) <GEORoutePreloadSession> *routePreloadSession;
@property (nonatomic) float sceneAlpha;
@property (nonatomic, retain) VKSkyModel *skyModel;
@property (nonatomic) struct shared_ptr<gss::StyleManager> { struct StyleManager {} *x1; struct __shared_weak_count {} *x2; } styleManager;
@property (readonly) Class superclass;

- (id).cxx_construct;
- (void).cxx_destruct;
- (double)_calculateZoomLevelWithContext:(id)arg1;
- (void)appendDebugPreloadMissesToBuffer:(struct CommandBuffer { int (**x1)(); char *x2; unsigned char x3; struct RenderQueue {} *x4; struct ClearItem {} *x5; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_6_1_1; struct RenderItem {} **x_6_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_7_1_1; struct Texture2DLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_8_1_1; struct BufferLoadItem {} *x_8_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_8_1_3; } x8; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_9_1_3; } x9; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned int x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_10_1_3; } x10; id x11; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; struct __compressed_pair<float, std::__1::__unordered_map_equal<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::equal_to<GEOGenericTileType>, true> > { float __first_; } x23; }*)arg1 inContext:(id)arg2 forScene:(id)arg3;
- (void)appendDebugPreloadStatusToBuffer:(struct CommandBuffer { int (**x1)(); char *x2; unsigned char x3; struct RenderQueue {} *x4; struct ClearItem {} *x5; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_6_1_1; struct RenderItem {} **x_6_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_7_1_1; struct Texture2DLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_8_1_1; struct BufferLoadItem {} *x_8_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_8_1_3; } x8; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_9_1_3; } x9; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned int x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_10_1_3; } x10; id x11; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; BOOL x25; out void*x26; in void*x27; void*x28; struct  {} x29; void*x30; char *x31; void*x32; void*x33; void*x34; void*x35; void*x36; void*x37; void*x38; void*x39; void*x40; }*)arg1 inContext:(id)arg2 forScene:(id)arg3;
- (void)appendLandCommandsToBuffer:(struct CommandBuffer { int (**x1)(); char *x2; unsigned char x3; struct RenderQueue {} *x4; struct ClearItem {} *x5; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_6_1_1; struct RenderItem {} **x_6_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_7_1_1; struct Texture2DLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_8_1_1; struct BufferLoadItem {} *x_8_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_8_1_3; } x8; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_9_1_3; } x9; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned int x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_10_1_3; } x10; id x11; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; const BOOL x19; void*x20; void*x21; void*x22; void*x23; SEL x24; union { BOOL x_25_1_1; out in short x_25_1_2; void*x_25_1_3; void*x_25_1_4; short x_25_1_5; void*x_25_1_6; const void*x_25_1_7; BOOL x_25_1_8; void*x_25_1_9; void*x_25_1_10; oneway void*x_25_1_11; void*x_25_1_12; int x_25_1_13; long x_25_1_14; void*x_25_1_15; void*x_25_1_16; void*x_25_1_17; void*x_25_1_18; void*x_25_1_19; struct  unsigned int x1; int x2; int x3; unsigned int x4;  {} x_25_1_20; char *x_25_1_21; } x25; void*x26; const void*x27; void*x28; void*x29; void*x30; void*x31; id x32; in double x33; void*x34; int x35; void*x36; long x37; void*x38; void*x39; void*x40; void*x41; void*x42; void*x43; void*x44; void*x45; void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; void*x52; short x53; void*x54; void*x55; void*x56; double x57; void*x58; SEL x59; void*x60; SEL x61; void*x62; void*x63; void*x64; void*x65; void*x66; void*x67; void*x68; SEL x69; void*x70; SEL x71; void*x72; short x73; void*x74; void*x75; void*x76; void*x77; void*x78; const void*x79; void*x80; void*x81; double x82; void*x83; void*x84; void*x85; void*x86; void*x87; void*x88; void*x89; const void*x90; void*x91; void*x92; void*x93; void*x94; void*x95; void*x96; long x97; void*x98; SEL x99; void*x100; SEL x101; void*x102; void*x103; void*x104; void*x105; void*x106; void*x107; void*x108; void*x109; void*x110; void*x111; void*x112; const void*x113; void*x114; void*x115; void*x116; void*x117; long doublex118; void*x119; void*x120; void*x121; void*x122; void*x123; void*x124; void*x125; void*x126; void*x127; void*x128; void*x129; void x130; void*x131; out void*x132; int x133; void*x134; double x135; void*x136; void*x137; void*x138; char *x139; void*x140; void*x141; void*x142; void*x143; void*x144; char *x145; void*x146; void*x147; void*x148; void*x149; void*x150; void*x151; void*x152; short x153; void*x154; void*x155; void*x156; double x157; void*x158; SEL x159; void*x160; SEL x161; void*x162; void*x163; void*x164; void*x165; void*x166; void*x167; void*x168; SEL x169; void*x170; SEL x171; void*x172; void*x173; void*x174; long x175; void*x176; long x177; void*x178; out void*x179; BOOL x180; void*x181; void*x182; void*x183; void*x184; void*x185; out void*x186; const void*x187; void*x188; void*x189; short x190; void*x191; void*x192; void*x193; double x194; void*x195; SEL x196; void*x197; SEL x198; void*x199; void*x200; void*x201; void*x202; void*x203; void*x204; void*x205; SEL x206; void*x207; SEL x208; void*x209; void*x210; void*x211; void*x212; void*x213; void*x214; void*x215; void*x216; void*x217; short x218; void*x219; void*x220; void*x221; void*x222; void*x223; in void*x224; out void*x225; double x226; void*x227; void*x228; void*x229; void*x230; void*x231; short x232; void*x233; void*x234; void*x235; double x236; void*x237; SEL x238; void*x239; SEL x240; void*x241; void*x242; void*x243; void*x244; void*x245; void*x246; void*x247; SEL x248; void*x249; SEL x250; void*x251; void*x252; void*x253; void*x254; void*x255; void*x256; void*x257; void*x258; void*x259; short x260; void*x261; void*x262; void*x263; void*x264; void*x265; void x266; void*x267; void*x268; void*x269; long x270; void*x271; void*x272; void*x273; void*x274; void*x275; void*x276; void*x277; void*x278; void*x279; void*x280; void*x281; void*x282; void*x283; void*x284; void*x285; void*x286; void*x287; void*x288; void*x289; void*x290; void*x291; bycopy void*x292; void*x293; void*x294; void*x295; void*x296; in void*x297; void*x298; void*x299; const void*x300; int x301; void*x302; BOOL x303; void*x304; void*x305; void*x306; int x307; void*x308; void x309; void*x310; void*x311; void*x312; BOOL x313; void*x314; void*x315; void*x316; out void*x317; const void*x318; void*x319; void*x320; void*x321; void*x322; void*x323; void*x324; long x325; void*x326; SEL x327; void*x328; SEL x329; void*x330; void*x331; void*x332; void*x333; void*x334; void*x335; void*x336; void*x337; void*x338; void*x339; void*x340; const void*x341; void*x342; void*x343; void*x344; void*x345; long doublex346; void*x347; unsigned long x348; void*x349; out void*x350; void*x351; void*x352; double x353; void*x354; unsigned int x355; void*x356; void*x357; void*x358; void*x359; void*x360; void*x361; void*x362; void*x363; void*x364; void*x365; void*x366; short x367; void*x368; void*x369; void*x370; double x371; void*x372; SEL x373; void*x374; SEL x375; void*x376; void*x377; void*x378; void*x379; void*x380; void*x381; void*x382; SEL x383; void*x384; SEL x385; void*x386; void*x387; void*x388; long x389; void*x390; long x391; void*x392; out void*x393; BOOL x394; void*x395; void*x396; void*x397; void*x398; void*x399; out void*x400; const void*x401; void*x402; void*x403; void*x404; void*x405; void*x406; void*x407; long x408; void*x409; SEL x410; void*x411; SEL x412; void*x413; void*x414; void*x415; void*x416; void*x417; void*x418; void*x419; void*x420; void*x421; void*x422; void*x423; const void*x424; void*x425; void*x426; void*x427; void*x428; long doublex429; void*x430; unsigned long x431; void*x432; out void*x433; void*x434; void*x435; double x436; void*x437; unsigned int x438; void*x439; void*x440; void*x441; void*x442; void*x443; void*x444; void*x445; void*x446; void*x447; void*x448; void*x449; void*x450; void*x451; void*x452; void*x453; struct x454; void*x455; void*x456; void*x457; short x458; void*x459; void*x460; void*x461; const void*x462; void*x463; void*x464; BOOL x465; void*x466; void*x467; void*x468; void*x469; void*x470; void*x471; void*x472; void*x473; void*x474; void*x475; void*x476; void*x477; void*x478; void*x479; void*x480; const void*x481; void*x482; void*x483; void*x484; void*x485; long doublex486; void*x487; unsigned long x488; void*x489; out void*x490; void*x491; void*x492; double x493; void*x494; unsigned int x495; void*x496; void*x497; void*x498; void*x499; void*x500; void*x501; void*x502; void*x503; void*x504; struct x505; void*x506; }*)arg1 inContext:(id)arg2 skyParameters:(const struct SkyParameters { float x1; float x2; float x3; struct Matrix<float, 4, 1> { float x_4_1_1[4]; } x4; struct Matrix<float, 4, 1> { float x_5_1_1[4]; } x5; }*)arg3;
- (void)appendRoadCommandsToBuffer:(struct CommandBuffer { int (**x1)(); char *x2; unsigned char x3; struct RenderQueue {} *x4; struct ClearItem {} *x5; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_6_1_1; struct RenderItem {} **x_6_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_7_1_1; struct Texture2DLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_8_1_1; struct BufferLoadItem {} *x_8_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_8_1_3; } x8; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_9_1_3; } x9; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned int x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_10_1_3; } x10; id x11; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; const void*x21; void*x22; void*x23; double x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; const void*x32; void*x33; void*x34; void*x35; void*x36; void*x37; void*x38; long x39; void*x40; SEL x41; void*x42; SEL x43; void*x44; unsigned long long x45; void*x46; void*x47; void*x48; void*x49; void*x50; const void*x51; void*x52; void*x53; unsigned int x54; void*x55; void*x56; void*x57; void*x58; void*x59; void*x60; void*x61; void*x62; void*x63; void*x64; void*x65; void*x66; void*x67; void*x68; void*x69; void*x70; void*x71; void*x72; void*x73; struct x74; void*x75; void*x76; void*x77; short x78; void*x79; void*x80; void*x81; const void*x82; void*x83; void*x84; BOOL x85; void*x86; void*x87; void*x88; void*x89; void*x90; void*x91; void*x92; void*x93; void*x94; short x95; void*x96; void*x97; void*x98; long x99; void*x100; int x101; void*x102; void*x103; void*x104; void*x105; void*x106; unsigned int x107/* : ? */; void*x108; void*x109; void*x110; float x111; void*x112; float x113; void*x114; void*x115; void*x116; const void*x117; void*x118; void*x119; void*x120; void*x121; void*x122; void*x123; out void*x124; SEL x125; void*x126; SEL x127; void*x128; float x129; void*x130; void*x131; void*x132; short x133; void*x134; void*x135; void*x136; void*x137; void*x138; short x139; void*x140; void*x141; void*x142; void*x143; void*x144; const void*x145; void*x146; void*x147; double x148; void*x149; void*x150; void*x151; void*x152; void*x153; void*x154; void*x155; const void*x156; void*x157; void*x158; void*x159; void*x160; void*x161; void*x162; long x163; void*x164; SEL x165; void*x166; SEL x167; void*x168; unsigned long long x169; void*x170; void*x171; void*x172; void*x173; void*x174; const void*x175; void*x176; void*x177; unsigned int x178; void*x179; void*x180; void*x181; void*x182; void*x183; void*x184; void*x185; void*x186; void*x187; void*x188; void*x189; char *x190; void*x191; void*x192; void*x193; void*x194; void*x195; short x196; void*x197; void*x198; void*x199; double x200; void*x201; SEL x202; void*x203; SEL x204; void*x205; void*x206; void*x207; void*x208; void*x209; void*x210; void*x211; SEL x212; void*x213; SEL x214; void*x215; void*x216; void*x217; long x218; void*x219; long x220; void*x221; out void*x222; BOOL x223; void*x224; void*x225; void*x226; void*x227; void*x228; out void*x229; const void*x230; void*x231; void*x232; void*x233; void*x234; void*x235; void*x236; out void*x237; SEL x238; void*x239; SEL x240; void*x241; float x242; void*x243; void*x244; void*x245; short x246; void*x247; void*x248; void*x249; void*x250; void*x251; short x252; void*x253; void*x254; void*x255; void*x256; void*x257; const void*x258; void*x259; void*x260; double x261; void*x262; void*x263; void*x264; void*x265; void*x266; void*x267; void*x268; const void*x269; void*x270; void*x271; void*x272; void*x273; void*x274; void*x275; long x276; void*x277; SEL x278; void*x279; SEL x280; void*x281; unsigned long long x282; void*x283; void*x284; void*x285; void*x286; void*x287; const void*x288; void*x289; void*x290; unsigned int x291; void*x292; void*x293; void*x294; void*x295; void*x296; void*x297; void*x298; void*x299; void*x300; void*x301; void*x302; char *x303; void*x304; void*x305; void*x306; void*x307; void*x308; void*x309; void*x310; void*x311; void*x312; struct x313; void*x314; void*x315; void*x316; short x317; void*x318; void*x319; void*x320; const void*x321; void*x322; void*x323; BOOL x324; void*x325; void*x326; void*x327; void*x328; void*x329; float x330; void*x331; void*x332; void*x333; short x334; void*x335; void*x336; void*x337; void*x338; void*x339; short x340; void*x341; void*x342; void*x343; void*x344; void*x345; const void*x346; void*x347; void*x348; double x349; void*x350; void*x351; void*x352; void*x353; void*x354; void*x355; void*x356; const void*x357; void*x358; void*x359; void*x360; void*x361; void*x362; void*x363; long x364; void*x365; SEL x366; void*x367; SEL x368; void*x369; unsigned long long x370; void*x371; void*x372; void*x373; void*x374; void*x375; const void*x376; void*x377; void*x378; unsigned int x379; void*x380; void*x381; void*x382; short x383; void*x384; void*x385; void*x386; const void*x387; void*x388; void*x389; BOOL x390; void*x391; void*x392; void*x393; void*x394; void*x395; double x396; void*x397; void*x398; void*x399; long long x400; void*x401; void*x402; void*x403; void*x404; void*x405; void*x406; void*x407; void*x408; void*x409; void*x410; void*x411; out void*x412; SEL x413; void*x414; SEL x415; void*x416; float x417; void*x418; void*x419; void*x420; short x421; void*x422; void*x423; void*x424; void*x425; void*x426; short x427; void*x428; void*x429; void*x430; void*x431; void*x432; const void*x433; void*x434; void*x435; double x436; void*x437; void*x438; void*x439; void*x440; void*x441; void*x442; void*x443; const void*x444; void*x445; void*x446; void*x447; void*x448; void*x449; void*x450; long x451; void*x452; SEL x453; void*x454; SEL x455; void*x456; unsigned long long x457; void*x458; void*x459; void*x460; void*x461; void*x462; const void*x463; void*x464; void*x465; unsigned int x466; void*x467; void*x468; void*x469; void*x470; void*x471; void*x472; void*x473; void*x474; void*x475; void*x476; void*x477; void*x478; void*x479; short x480; void*x481; void*x482; void*x483; double x484; void*x485; SEL x486; void*x487; SEL x488; void*x489; void*x490; void*x491; void*x492; void*x493; void*x494; void*x495; SEL x496; void*x497; SEL x498; void*x499; void*x500; void*x501; long x502; void*x503; long x504; void*x505; out void*x506; BOOL x507; void*x508; void*x509; void*x510; void*x511; void*x512; out void*x513; const void*x514; void*x515; void*x516; void*x517; void*x518; void*x519; void*x520; out void*x521; SEL x522; void*x523; SEL x524; void*x525; float x526; void*x527; void*x528; void*x529; short x530; void*x531; void*x532; void*x533; void*x534; void*x535; short x536; void*x537; void*x538; void*x539; void*x540; void*x541; const void*x542; void*x543; void*x544; double x545; void*x546; void*x547; void*x548; void*x549; void*x550; void*x551; void*x552; const void*x553; void*x554; void*x555; void*x556; void*x557; void*x558; void*x559; long x560; void*x561; SEL x562; void*x563; SEL x564; void*x565; unsigned long long x566; void*x567; void*x568; void*x569; void*x570; void*x571; const void*x572; void*x573; void*x574; unsigned int x575; void*x576; void*x577; void*x578; void*x579; void*x580; void*x581; void*x582; void*x583; void*x584; void*x585; void*x586; void*x587; void*x588; void*x589; void*x590; void*x591; void*x592; void*x593; void*x594; struct x595; void*x596; void*x597; void*x598; short x599; void*x600; void*x601; void*x602; const void*x603; void*x604; void*x605; BOOL x606; void*x607; void*x608; void*x609; void*x610; void*x611; void*x612; void*x613; void*x614; void*x615; short x616; void*x617; void*x618; void*x619; long x620; void*x621; int x622; void*x623; void*x624; void*x625; void*x626; void*x627; unsigned int x628/* : ? */; void*x629; void*x630; void*x631; float x632; void*x633; float x634; void*x635; void*x636; void*x637; const void*x638; void*x639; void*x640; void*x641; void*x642; void*x643; void*x644; out void*x645; SEL x646; void*x647; SEL x648; void*x649; float x650; void*x651; void*x652; void*x653; short x654; void*x655; void*x656; void*x657; void*x658; void*x659; short x660; void*x661; void*x662; void*x663; void*x664; void*x665; const void*x666; void*x667; void*x668; double x669; void*x670; void*x671; void*x672; void*x673; void*x674; void*x675; void*x676; const void*x677; void*x678; void*x679; void*x680; void*x681; void*x682; void*x683; long x684; void*x685; SEL x686; void*x687; SEL x688; void*x689; unsigned long long x690; void*x691; void*x692; void*x693; void*x694; void*x695; const void*x696; void*x697; void*x698; unsigned int x699; void*x700; void*x701; void*x702; void*x703; void*x704; void*x705; void*x706; void*x707; void*x708; void*x709; void*x710; char *x711; void*x712; void*x713; void*x714; void*x715; void*x716; short x717; void*x718; void*x719; void*x720; double x721; void*x722; SEL x723; void*x724; SEL x725; void*x726; void*x727; void*x728; void*x729; void*x730; void*x731; void*x732; SEL x733; void*x734; SEL x735; void*x736; void*x737; void*x738; long x739; void*x740; long x741; void*x742; out void*x743; BOOL x744; void*x745; void*x746; void*x747; void*x748; void*x749; out void*x750; const void*x751; void*x752; void*x753; void*x754; void*x755; void*x756; void*x757; out void*x758; SEL x759; void*x760; SEL x761; void*x762; float x763; void*x764; void*x765; void*x766; short x767; void*x768; void*x769; void*x770; void*x771; void*x772; short x773; void*x774; void*x775; void*x776; void*x777; void*x778; const void*x779; void*x780; void*x781; double x782; void*x783; void*x784; void*x785; void*x786; void*x787; void*x788; void*x789; const void*x790; void*x791; void*x792; void*x793; void*x794; void*x795; void*x796; long x797; void*x798; SEL x799; void*x800; SEL x801; void*x802; unsigned long long x803; void*x804; void*x805; void*x806; void*x807; void*x808; const void*x809; void*x810; void*x811; unsigned int x812; void*x813; void*x814; void*x815; void*x816; void*x817; void*x818; void*x819; void*x820; void*x821; void*x822; void*x823; char *x824; void*x825; void*x826; void*x827; void*x828; void*x829; void*x830; void*x831; void*x832; void*x833; struct x834; void*x835; void*x836; void*x837; short x838; void*x839; void*x840; void*x841; const void*x842; void*x843; void*x844; BOOL x845; void*x846; void*x847; void*x848; void*x849; void*x850; float x851; void*x852; void*x853; void*x854; short x855; void*x856; void*x857; void*x858; void*x859; void*x860; short x861; void*x862; void*x863; void*x864; void*x865; void*x866; const void*x867; void*x868; void*x869; double x870; void*x871; void*x872; void*x873; void*x874; void*x875; void*x876; void*x877; const void*x878; void*x879; void*x880; void*x881; void*x882; void*x883; void*x884; long x885; void*x886; SEL x887; void*x888; SEL x889; void*x890; unsigned long long x891; void*x892; void*x893; void*x894; void*x895; void*x896; const void*x897; void*x898; void*x899; unsigned int x900; void*x901; void*x902; void*x903; void*x904; void*x905; void*x906; void*x907; void*x908; void*x909; void*x910; void*x911; struct x912; void*x913; }*)arg1 inContext:(id)arg2 skyParameters:(const struct SkyParameters { float x1; float x2; float x3; struct Matrix<float, 4, 1> { float x_4_1_1[4]; } x4; struct Matrix<float, 4, 1> { float x_5_1_1[4]; } x5; }*)arg3;
- (void)appendStencilCommandsToBuffer:(struct CommandBuffer { int (**x1)(); char *x2; unsigned char x3; struct RenderQueue {} *x4; struct ClearItem {} *x5; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_6_1_1; struct RenderItem {} **x_6_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_7_1_1; struct Texture2DLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_8_1_1; struct BufferLoadItem {} *x_8_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_8_1_3; } x8; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_9_1_3; } x9; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned int x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_10_1_3; } x10; id x11; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; struct x31; void*x32; void*x33; void*x34; short x35; void*x36; void*x37; void*x38; const void*x39; void*x40; void*x41; BOOL x42; void*x43; void*x44; void*x45; void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; short x52; void*x53; void*x54; void*x55; long x56; void*x57; int x58; void*x59; void*x60; void*x61; void*x62; void*x63; unsigned int x64/* : ? */; void*x65; void*x66; void*x67; float x68; void*x69; float x70; void*x71; void*x72; void*x73; const void*x74; void*x75; void*x76; void*x77; void*x78; void*x79; void*x80; out void*x81; SEL x82; void*x83; SEL x84; void*x85; float x86; void*x87; void*x88; void*x89; short x90; void*x91; void*x92; void*x93; void*x94; void*x95; short x96; void*x97; void*x98; void*x99; void*x100; void*x101; const void*x102; void*x103; void*x104; double x105; void*x106; void*x107; void*x108; void*x109; void*x110; void*x111; void*x112; const void*x113; void*x114; void*x115; void*x116; void*x117; void*x118; void*x119; long x120; void*x121; SEL x122; void*x123; SEL x124; void*x125; unsigned long long x126; void*x127; void*x128; void*x129; void*x130; void*x131; const void*x132; void*x133; void*x134; unsigned int x135; void*x136; void*x137; void*x138; void*x139; void*x140; void*x141; void*x142; void*x143; void*x144; void*x145; void*x146; char *x147; void*x148; void*x149; void*x150; void*x151; void*x152; short x153; void*x154; void*x155; void*x156; double x157; void*x158; SEL x159; void*x160; SEL x161; void*x162; void*x163; void*x164; void*x165; void*x166; void*x167; void*x168; SEL x169; void*x170; SEL x171; void*x172; void*x173; void*x174; long x175; void*x176; long x177; void*x178; out void*x179; BOOL x180; void*x181; void*x182; void*x183; void*x184; void*x185; out void*x186; const void*x187; void*x188; void*x189; void*x190; void*x191; void*x192; void*x193; out void*x194; SEL x195; void*x196; SEL x197; void*x198; float x199; void*x200; void*x201; void*x202; short x203; void*x204; void*x205; void*x206; void*x207; void*x208; short x209; void*x210; void*x211; void*x212; void*x213; void*x214; const void*x215; void*x216; void*x217; double x218; void*x219; void*x220; void*x221; void*x222; void*x223; void*x224; void*x225; const void*x226; void*x227; void*x228; void*x229; void*x230; void*x231; void*x232; long x233; void*x234; SEL x235; void*x236; SEL x237; void*x238; unsigned long long x239; void*x240; void*x241; void*x242; void*x243; void*x244; const void*x245; void*x246; void*x247; unsigned int x248; void*x249; void*x250; void*x251; void*x252; void*x253; void*x254; void*x255; void*x256; void*x257; void*x258; void*x259; char *x260; void*x261; void*x262; void*x263; void*x264; void*x265; void*x266; void*x267; void*x268; void*x269; struct x270; void*x271; void*x272; void*x273; short x274; void*x275; void*x276; void*x277; const void*x278; void*x279; void*x280; BOOL x281; void*x282; void*x283; void*x284; void*x285; void*x286; float x287; void*x288; void*x289; void*x290; short x291; void*x292; void*x293; void*x294; void*x295; void*x296; short x297; void*x298; void*x299; void*x300; void*x301; void*x302; const void*x303; void*x304; void*x305; double x306; void*x307; void*x308; void*x309; void*x310; void*x311; void*x312; void*x313; const void*x314; void*x315; void*x316; void*x317; void*x318; void*x319; void*x320; long x321; void*x322; SEL x323; void*x324; SEL x325; void*x326; unsigned long long x327; void*x328; void*x329; void*x330; void*x331; void*x332; const void*x333; void*x334; void*x335; unsigned int x336; void*x337; void*x338; void*x339; void*x340; void*x341; void*x342; void*x343; void*x344; void*x345; void*x346; void*x347; struct x348; void*x349; }*)arg1 inContext:(id)arg2;
- (void)appendWaterCommandsToBuffer:(struct CommandBuffer { int (**x1)(); char *x2; unsigned char x3; struct RenderQueue {} *x4; struct ClearItem {} *x5; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_6_1_1; struct RenderItem {} **x_6_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_7_1_1; struct Texture2DLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_8_1_1; struct BufferLoadItem {} *x_8_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_8_1_3; } x8; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_9_1_3; } x9; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned int x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_10_1_3; } x10; id x11; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void x23; void*x24; out void*x25; int x26; void*x27; double x28; void*x29; char *x30; void*x31; void*x32; void*x33; void*x34; void*x35; void*x36; void*x37; void*x38; void*x39; void*x40; void*x41; void*x42; void*x43; void x44; void*x45; out void*x46; int x47; void*x48; double x49; void*x50; char *x51; void*x52; void*x53; void*x54; void*x55; void*x56; void*x57; void*x58; void*x59; void*x60; void*x61; void*x62; void*x63; void*x64; void x65; void*x66; out void*x67; int x68; void*x69; double x70; void*x71; char *x72; void*x73; void*x74; void*x75; void*x76; void*x77; void*x78; void*x79; void*x80; void*x81; void*x82; void*x83; void*x84; void*x85; void x86; void*x87; out void*x88; int x89; void*x90; double x91; void*x92; char *x93; void*x94; void*x95; void*x96; void*x97; void*x98; void*x99; void*x100; void*x101; void*x102; void*x103; void*x104; void*x105; void*x106; BOOL x107; void*x108; out void*x109; in void*x110; short x111; void*x112; void*x113; void*x114; void*x115; void*x116; void x117; void*x118; out void*x119; int x120; void*x121; double x122; void*x123; char *x124; void*x125; void*x126; void*x127; void*x128; void*x129; void*x130; void*x131; void*x132; void*x133; void*x134; void*x135; void*x136; void*x137; void x138; void*x139; out void*x140; int x141; void*x142; double x143; void*x144; char *x145; void*x146; void*x147; void*x148; void*x149; void*x150; void*x151; void*x152; void*x153; void*x154; void*x155; void*x156; void*x157; void*x158; void x159; void*x160; out void*x161; int x162; void*x163; double x164; void*x165; char *x166; void*x167; void*x168; void*x169; void*x170; void*x171; void*x172; void*x173; void*x174; void*x175; void*x176; void*x177; void*x178; void*x179; void*x180; void*x181; in void*x182; short x183; void*x184; int x185; void*x186; void*x187; void*x188; in void*x189; void*x190; void*x191; double x192; void*x193; void*x194; void*x195; int x196; void*x197; in void*x198; void*x199; void*x200; void*x201; void*x202; void*x203; void*x204; void*x205; void*x206; void*x207; void*x208; void*x209; void*x210; void*x211; void*x212; void*x213; void*x214; void x215; void*x216; out void*x217; int x218; void*x219; double x220; void*x221; char *x222; void*x223; void*x224; void*x225; void*x226; void*x227; void*x228; void*x229; void*x230; void*x231; void*x232; void*x233; void*x234; void*x235; void x236; void*x237; out void*x238; int x239; void*x240; double x241; void*x242; char *x243; void*x244; void*x245; void*x246; void*x247; void*x248; void*x249; void*x250; void*x251; void*x252; void*x253; void*x254; void*x255; void*x256; void x257; void*x258; out void*x259; int x260; void*x261; double x262; void*x263; char *x264; void*x265; void*x266; void*x267; void*x268; void*x269; void*x270; void*x271; void*x272; void*x273; void*x274; void*x275; void*x276; void*x277; void x278; void*x279; out void*x280; int x281; void*x282; double x283; void*x284; char *x285; void*x286; void*x287; void*x288; void*x289; void*x290; void*x291; void*x292; void*x293; void*x294; void*x295; void*x296; void*x297; void*x298; void x299; void*x300; out void*x301; int x302; void*x303; double x304; void*x305; char *x306; void*x307; void*x308; void*x309; void*x310; void*x311; void*x312; void*x313; void*x314; void*x315; void*x316; void*x317; void*x318; void*x319; void x320; void*x321; out void*x322; int x323; void*x324; double x325; void*x326; char *x327; void*x328; void*x329; void*x330; void*x331; void*x332; void*x333; void*x334; void*x335; void*x336; void*x337; void*x338; void*x339; void*x340; void x341; void*x342; out void*x343; int x344; void*x345; double x346; void*x347; char *x348; void*x349; void*x350; void*x351; void*x352; void*x353; void*x354; void*x355; void*x356; void*x357; void*x358; void*x359; void*x360; void*x361; void x362; void*x363; out void*x364; int x365; void*x366; double x367; void*x368; char *x369; void*x370; void*x371; void*x372; void*x373; void*x374; void*x375; void*x376; void*x377; void*x378; void*x379; void*x380; void*x381; void*x382; short x383; void*x384; void*x385; void*x386; const void*x387; void*x388; void*x389; BOOL x390; void*x391; void*x392; void*x393; void*x394; void*x395; void x396; void*x397; void*x398; void*x399; BOOL x400; void*x401; void*x402; void*x403; out void*x404; const void*x405; void*x406; void*x407; void*x408; void*x409; void*x410; void*x411; long x412; void*x413; SEL x414; void*x415; SEL x416; void*x417; void*x418; void*x419; void*x420; void*x421; in void*x422; double x423; void*x424; void*x425; void*x426; const void*x427; unsigned int x428; void*x429; void*x430; void*x431; void*x432; void*x433; void*x434; void*x435; void*x436; void*x437; char *x438; void*x439; void*x440; void*x441; void*x442; void*x443; short x444; void*x445; void*x446; void*x447; double x448; void*x449; SEL x450; void*x451; SEL x452; void*x453; void*x454; void*x455; void*x456; void*x457; void*x458; void*x459; SEL x460; void*x461; SEL x462; void*x463; void*x464; void*x465; long x466; void*x467; long x468; void*x469; out void*x470; BOOL x471; void*x472; void*x473; void*x474; void*x475; void*x476; out void*x477; const void*x478; void*x479; void*x480; void*x481; void*x482; void*x483; void*x484; long x485; void*x486; SEL x487; void*x488; SEL x489; void*x490; void*x491; void*x492; void*x493; void*x494; in void*x495; double x496; void*x497; void*x498; void*x499; const void*x500; unsigned int x501; void*x502; void*x503; void*x504; void*x505; void*x506; void*x507; void*x508; void*x509; void*x510; char *x511; void*x512; void*x513; void*x514; void*x515; void*x516; void*x517; void*x518; void*x519; void*x520; struct x521; void*x522; void*x523; void*x524; short x525; void*x526; void*x527; void*x528; const void*x529; void*x530; void*x531; BOOL x532; void*x533; void*x534; void*x535; void*x536; void*x537; void*x538; void*x539; void*x540; void*x541; in void*x542; double x543; void*x544; void*x545; void*x546; const void*x547; unsigned int x548; void*x549; void*x550; void*x551; void*x552; void*x553; void*x554; void*x555; void*x556; void*x557; struct x558; void*x559; }*)arg1 inContext:(id)arg2 skyParameters:(const struct SkyParameters { float x1; float x2; float x3; struct Matrix<float, 4, 1> { float x_4_1_1[4]; } x4; struct Matrix<float, 4, 1> { float x_5_1_1[4]; } x5; }*)arg3;
- (void)dealloc;
- (void)didReceiveMemoryWarning:(BOOL)arg1;
- (BOOL)disableRealisticLand;
- (BOOL)disableRealisticRoads;
- (void)flushPools;
- (void)gatherRenderingPreloadItems:(struct vector<ggl::ShaderLoadItem, std::__1::allocator<ggl::ShaderLoadItem> > { struct ShaderLoadItem {} *x1; struct ShaderLoadItem {} *x2; struct __compressed_pair<ggl::ShaderLoadItem *, std::__1::allocator<ggl::ShaderLoadItem> > { struct ShaderLoadItem {} *x_3_1_1; } x3; }*)arg1;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue { int (**x1)(); struct shared_ptr<ggl::RenderQueue> { struct RenderQueue {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; }*)arg3;
- (id)init;
- (unsigned long long)mapLayerPosition;
- (BOOL)minimumZoomLevelBoundsCamera;
- (void)reset;
- (void)resetDebugPools:(id)arg1;
- (void)resetPools;
- (id)routePreloadSession;
- (float)sceneAlpha;
- (void)setDisableRealisticLand:(BOOL)arg1;
- (void)setDisableRealisticRoads:(BOOL)arg1;
- (void)setRoutePreloadSession:(id)arg1;
- (void)setSceneAlpha:(float)arg1;
- (void)setSkyModel:(id)arg1;
- (void)setStyleManager:(struct shared_ptr<gss::StyleManager> { struct StyleManager {} *x1; struct __shared_weak_count {} *x2; })arg1;
- (void)setupRealisticUniformBuffer:(struct ConstantDataTyped<ggl::RealisticTexture::Realistic> { int x1; int x2; int x3; struct shared_ptr<ggl::Buffer> { struct Buffer {} *x_4_1_1; struct __shared_weak_count {} *x_4_1_2; } x4; struct Range { unsigned int x_5_1_1; unsigned int x_5_1_2; } x5; unsigned int x6; struct Range { unsigned int x_7_1_1; unsigned int x_7_1_2; } x7; struct vector<unsigned char, std::__1::allocator<unsigned char> > { char *x_8_1_1; char *x_8_1_2; struct __compressed_pair<unsigned char *, std::__1::allocator<unsigned char> > { char *x_3_2_1; } x_8_1_3; } x8; struct ConstantCReflection {} *x9; }*)arg1 forTile:(id)arg2;
- (id)skyModel;
- (struct shared_ptr<gss::StyleManager> { struct StyleManager {} *x1; struct __shared_weak_count {} *x2; })styleManager;
- (void)stylesheetDidChange;
- (void)stylesheetDoneChanging;
- (void)stylesheetTransitionDidProgress;
- (void)stylesheetWillTransition:(struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; })arg1;
- (BOOL)wantsCategorizedSourceTiles;
- (void)willStartDrawingTiles:(id)arg1;

@end
