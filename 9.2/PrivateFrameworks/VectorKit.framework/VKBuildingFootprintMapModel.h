/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKBuildingFootprintMapModel : VKVectorMapModel <VKMapLayer, VKMercatorTerrainHeightProvider> {
    struct RenderItemBatcher { 
        struct vector<ggl::Range, std::__1::allocator<ggl::Range> > { 
            struct Range {} *__begin_; 
            struct Range {} *__end_; 
            struct __compressed_pair<ggl::Range *, std::__1::allocator<ggl::Range> > { 
                struct Range {} *__first_; 
            } __end_cap_; 
        } _activeRanges; 
        unsigned int _rangePoolCount; 
        struct vector<ggl::MultiRange, std::__1::allocator<ggl::MultiRange> > { 
            struct MultiRange {} *__begin_; 
            struct MultiRange {} *__end_; 
            struct __compressed_pair<ggl::MultiRange *, std::__1::allocator<ggl::MultiRange> > { 
                struct MultiRange {} *__first_; 
            } __end_cap_; 
        } _rangePool; 
        struct vector<ggl::Range, std::__1::allocator<ggl::Range> > { 
            struct Range {} *__begin_; 
            struct Range {} *__end_; 
            struct __compressed_pair<ggl::Range *, std::__1::allocator<ggl::Range> > { 
                struct Range {} *__first_; 
            } __end_cap_; 
        } _activeRanges; 
        struct RenderItem {} *_prototype; 
        struct Pool<ggl::RenderItem> { 
            struct set<void *, std::__1::less<void *>, std::__1::allocator<void *> > { 
                struct __tree<void *, std::__1::less<void *>, std::__1::allocator<void *> > { 
                    struct __tree_node<void *, void *> {} *__begin_node_; 
                    struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<void *, void *> > > { 
                        struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                            struct __tree_node_base<void *> {} *__left_; 
                        } __first_; 
                    } __pair1_; 
                    struct __compressed_pair<unsigned long, std::__1::less<void *> > { 
                        unsigned long __first_; 
                    } __pair3_; 
                } __tree_; 
            } mAllocatedSlabs; 
            unsigned int mElementsPerSlab; 
            unsigned int mSlabSize; 
            struct FreeList {} *mFreeElement; 
        } _pool; 
        unsigned int _rangePoolCount; 
        struct vector<ggl::MultiRange, std::__1::allocator<ggl::MultiRange> > { 
            struct MultiRange {} *__begin_; 
            struct MultiRange {} *__end_; 
            struct __compressed_pair<ggl::MultiRange *, std::__1::allocator<ggl::MultiRange> > { 
                struct MultiRange {} *__first_; 
            } __end_cap_; 
        } _rangePool; 
    }  _batcher;
    float  _brightness;
    int  _buildingMode;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    }  _buildingRenderItemPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::Building::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::Building::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::Building::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::Building::Shader::Setup> > > { 
            struct FragmentedPool<ggl::Building::Shader::Setup> {} *__first_; 
        } __ptr_; 
    }  _buildingShaderSetupPool;
    struct unordered_map<VKVectorTile *, OccluderGroupList, std::__1::hash<VKVectorTile *>, std::__1::equal_to<VKVectorTile *>, std::__1::allocator<std::__1::pair<VKVectorTile *const, OccluderGroupList> > > { 
        struct __hash_table<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::__unordered_map_hasher<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::hash<VKVectorTile *>, true>, std::__1::__unordered_map_equal<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::equal_to<VKVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList> > > { 
            struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> > > { 
                struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> > > { 
                    struct __hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> {} **__first_; 
                    struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> > { 
                        struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> > { 
                            unsigned long __first_; 
                        } __data_; 
                    } __second_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> > > { 
                struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> { 
                    struct __hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> {} *__next_; 
                } __first_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::hash<VKVectorTile *>, true> > { 
                unsigned long __first_; 
            } __p2_; 
            struct __compressed_pair<float, std::__1::__unordered_map_equal<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::equal_to<VKVectorTile *>, true> > { 
                float __first_; 
            } __p3_; 
        } __table_; 
    }  _currentOccluders;
    <VKBuildingFootprintMapModelDelegate> * _delegate;
    VKTimedAnimation * _fadeBuildingAnimation;
    BOOL  _fadeTiles;
    struct shared_ptr<ggl::RenderState> { 
        struct RenderState {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _fillRenderState;
    struct shared_ptr<ggl::RenderState> { 
        struct RenderState {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _fillRenderStateWithBlending;
    struct unique_ptr<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup> > > { 
            struct FragmentedPool<ggl::BuildingFlat::Shader::Setup> {} *__first_; 
        } __ptr_; 
    }  _fillShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::FoggedBuilding::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::FoggedBuilding::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::FoggedBuilding::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::FoggedBuilding::Shader::Setup> > > { 
            struct FragmentedPool<ggl::FoggedBuilding::Shader::Setup> {} *__first_; 
        } __ptr_; 
    }  _foggedBuildingShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::FoggedBuildingTop::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::FoggedBuildingTop::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::FoggedBuildingTop::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::FoggedBuildingTop::Shader::Setup> > > { 
            struct FragmentedPool<ggl::FoggedBuildingTop::Shader::Setup> {} *__first_; 
        } __ptr_; 
    }  _foggedTopShaderSetupPool;
    VKMercatorTerrainHeightCache * _heightCache;
    BOOL  _initializedStyles;
    VK3DObjectSubMapModel * _landmarksModel;
    float  _maxLayeringHeight;
    float  _minLayeringHeight;
    struct unique_ptr<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup> > > { 
            struct FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup> {} *__first_; 
        } __ptr_; 
    }  _pointyRoofShaderSetupPool;
    struct unordered_map<VKVectorTile *, OccluderGroupList, std::__1::hash<VKVectorTile *>, std::__1::equal_to<VKVectorTile *>, std::__1::allocator<std::__1::pair<VKVectorTile *const, OccluderGroupList> > > { 
        struct __hash_table<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::__unordered_map_hasher<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::hash<VKVectorTile *>, true>, std::__1::__unordered_map_equal<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::equal_to<VKVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList> > > { 
            struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> > > { 
                struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> > > { 
                    struct __hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> {} **__first_; 
                    struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> > { 
                        struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> > { 
                            unsigned long __first_; 
                        } __data_; 
                    } __second_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> > > { 
                struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> { 
                    struct __hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> {} *__next_; 
                } __first_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::hash<VKVectorTile *>, true> > { 
                unsigned long __first_; 
            } __p2_; 
            struct __compressed_pair<float, std::__1::__unordered_map_equal<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::equal_to<VKVectorTile *>, true> > { 
                float __first_; 
            } __p3_; 
        } __table_; 
    }  _previousOccluders;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    }  _shadowRenderItemPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup> > > { 
            struct FragmentedPool<ggl::BuildingShadow::Shader::Setup> {} *__first_; 
        } __ptr_; 
    }  _shadowShaderSetupPool;
    struct shared_ptr<ggl::RenderState> { 
        struct RenderState {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _shadowsRenderState;
    bool  _shouldDraw3DBuildingsIn3DBuildingsRenderPass;
    bool  _shouldDraw3DBuildingsInVectorBuildingsRenderPass;
    VKSkyModel * _skyModel;
    int  _stencilRef;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    }  _stroke3DRenderItemPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup> > > { 
            struct FragmentedPool<ggl::PrefilteredLine::Shader::Setup> {} *__first_; 
        } __ptr_; 
    }  _stroke3DShaderSetupPool;
    struct shared_ptr<ggl::RenderState> { 
        struct RenderState {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _strokeRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup> > > { 
            struct FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup> {} *__first_; 
        } __ptr_; 
    }  _strokeShaderSetupPool;
    VKTimedAnimation * _styleChangeAnimation;
    struct shared_ptr<gss::StyleManager> { 
        struct StyleManager {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _styleManager;
    BOOL  _supports3DBuildings;
    BOOL  _supports3DStrokes;
    BOOL  _supportsBuildingShadows;
    BOOL  _supportsStrokes;
    struct shared_ptr<ggl::RenderState> { 
        struct RenderState {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _threeDRenderStateWithBlending;
    struct shared_ptr<ggl::RenderState> { 
        struct RenderState {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _threeDRenderStateWithoutBlending;
    struct shared_ptr<ggl::RenderState> { 
        struct RenderState {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _threeDStrokeRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup> > > { 
            struct FragmentedPool<ggl::BuildingTop::Shader::Setup> {} *__first_; 
        } __ptr_; 
    }  _topShaderSetupPool;
    int  _vectorType;
}

@property (nonatomic) int buildingMode;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <VKBuildingFootprintMapModelDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) BOOL fadeTiles;
@property (readonly) unsigned int hash;
@property (nonatomic, readonly) VKMercatorTerrainHeightCache *heightCache;
@property (nonatomic, retain) VK3DObjectSubMapModel *landmarksModel;
@property (nonatomic, retain) VKSkyModel *skyModel;
@property (nonatomic) struct shared_ptr<gss::StyleManager> { struct StyleManager {} *x1; struct __shared_weak_count {} *x2; } styleManager;
@property (readonly) Class superclass;
@property (nonatomic) int vectorType;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_clearOccluders;
- (void)_updateBuildingModeForContext:(id)arg1;
- (void)_updateStyles;
- (void)animateTiles:(id)arg1 fromAlpha:(float)arg2 toAlpha:(float)arg3 fromScale:(float)arg4 toScale:(float)arg5;
- (int)buildingMode;
- (void)dealloc;
- (id)delegate;
- (void)didReceiveMemoryWarning:(BOOL)arg1;
- (BOOL)fadeTiles;
- (id)featureMarkerInTile:(id)arg1 atPoint:(struct VKPoint { double x1; double x2; double x3; }*)arg2;
- (void)flushPools;
- (void)generate2DBuildingRenderItemsForScene:(id)arg1 withContext:(id)arg2 commandBuffer:(struct CommandBuffer { int (**x1)(); char *x2; unsigned char x3; struct RenderQueue {} *x4; struct ClearItem {} *x5; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_6_1_1; struct RenderItem {} **x_6_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_7_1_1; struct Texture2DLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_8_1_1; struct BufferLoadItem {} *x_8_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_8_1_3; } x8; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_9_1_3; } x9; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned int x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_10_1_3; } x10; id x11; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; }*)arg3;
- (void)generate2DBuildingRenderItemsIfNecessaryForScene:(id)arg1 withContext:(id)arg2 commandBuffer:(struct CommandBuffer { int (**x1)(); char *x2; unsigned char x3; struct RenderQueue {} *x4; struct ClearItem {} *x5; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_6_1_1; struct RenderItem {} **x_6_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_7_1_1; struct Texture2DLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_8_1_1; struct BufferLoadItem {} *x_8_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_8_1_3; } x8; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_9_1_3; } x9; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned int x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_10_1_3; } x10; id x11; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; in void*x27; short x28; void*x29; int x30; void*x31; void*x32; void*x33; in void*x34; void*x35; void*x36; double x37; void*x38; void*x39; void*x40; int x41; void*x42; in void*x43; void*x44; void*x45; void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; void*x52; void*x53; void*x54; void*x55; void*x56; void*x57; void*x58; void*x59; void*x60; void*x61; void*x62; void*x63; void*x64; void*x65; SEL x66; void*x67; void*x68; void*x69; void*x70; void*x71; void*x72; void*x73; void*x74; void*x75; void*x76; void*x77; in void*x78; short x79; void*x80; int x81; void*x82; void*x83; void*x84; in void*x85; void*x86; void*x87; double x88; void*x89; void*x90; void*x91; int x92; void*x93; in void*x94; void*x95; void*x96; void*x97; void*x98; void*x99; void*x100; void*x101; void*x102; void*x103; void*x104; void*x105; void*x106; void*x107; void*x108; void*x109; void*x110; void*x111; void*x112; void*x113; void*x114; void*x115; void*x116; SEL x117; void*x118; void*x119; void*x120; void*x121; void*x122; void*x123; void*x124; void*x125; void*x126; void*x127; void*x128; in void*x129; short x130; void*x131; int x132; void*x133; void*x134; void*x135; in void*x136; void*x137; void*x138; double x139; void*x140; void*x141; void*x142; int x143; void*x144; in void*x145; void*x146; void*x147; void*x148; void*x149; void*x150; void*x151; void*x152; void*x153; void*x154; void*x155; void*x156; void*x157; void*x158; void*x159; void*x160; void*x161; void*x162; void*x163; void*x164; void*x165; void*x166; void*x167; SEL x168; void*x169; void*x170; void*x171; void*x172; void*x173; void*x174; void*x175; void*x176; void*x177; void*x178; void*x179; in void*x180; short x181; void*x182; int x183; void*x184; void*x185; void*x186; in void*x187; void*x188; void*x189; double x190; void*x191; void*x192; void*x193; int x194; void*x195; in void*x196; void*x197; void*x198; void*x199; void*x200; void*x201; void*x202; void*x203; void*x204; void*x205; void*x206; void*x207; void*x208; void*x209; void*x210; void*x211; void*x212; void*x213; void*x214; void*x215; void*x216; void*x217; void*x218; SEL x219; void*x220; void*x221; void*x222; void*x223; void*x224; void*x225; void*x226; void*x227; void*x228; void*x229; void*x230; in void*x231; short x232; void*x233; int x234; void*x235; void*x236; void*x237; in void*x238; void*x239; void*x240; double x241; void*x242; void*x243; void*x244; int x245; void*x246; in void*x247; void*x248; void*x249; void*x250; void*x251; void*x252; void*x253; void*x254; void*x255; void*x256; void*x257; void*x258; void*x259; void*x260; void*x261; void*x262; void*x263; void*x264; void*x265; void*x266; void*x267; void*x268; void*x269; SEL x270; void*x271; void*x272; void*x273; void*x274; void*x275; void*x276; void*x277; void*x278; void*x279; void*x280; void*x281; in void*x282; short x283; void*x284; int x285; void*x286; void*x287; void*x288; in void*x289; void*x290; void*x291; double x292; void*x293; void*x294; void*x295; int x296; void*x297; in void*x298; void*x299; void*x300; void*x301; void*x302; void*x303; void*x304; void*x305; void*x306; void*x307; void*x308; void*x309; void*x310; void*x311; void*x312; void*x313; void*x314; void*x315; void*x316; void*x317; void*x318; void*x319; void*x320; SEL x321; void*x322; void*x323; void*x324; void*x325; void*x326; void*x327; void*x328; void*x329; void*x330; void*x331; void*x332; in void*x333; short x334; void*x335; int x336; void*x337; void*x338; void*x339; in void*x340; void*x341; void*x342; double x343; void*x344; void*x345; void*x346; int x347; void*x348; in void*x349; void*x350; void*x351; void*x352; void*x353; void*x354; void*x355; void*x356; void*x357; void*x358; void*x359; void*x360; void*x361; void*x362; void*x363; void*x364; void*x365; void*x366; void*x367; void*x368; void*x369; void*x370; void*x371; SEL x372; void*x373; void*x374; void*x375; void*x376; void*x377; void*x378; void*x379; void*x380; void*x381; short x382; void*x383; void*x384; void*x385; const void*x386; void*x387; void*x388; BOOL x389; void*x390; void*x391; void*x392; void*x393; void*x394; void x395; void*x396; void*x397; void*x398; BOOL x399; void*x400; void*x401; void*x402; out void*x403; const void*x404; void*x405; void*x406; void*x407; void*x408; void*x409; void*x410; long x411; void*x412; SEL x413; void*x414; SEL x415; void*x416; bool x417; void*x418; void*x419; void*x420; float x421; void*x422; float x423; void*x424; void*x425; void*x426; const void*x427; unsigned long x428; void*x429; out void*x430; void*x431; void*x432; double x433; void*x434; unsigned int x435; void*x436; void*x437; void*x438; void*x439; void*x440; void*x441; void*x442; void*x443; void*x444; void*x445; void*x446; short x447; void*x448; void*x449; void*x450; double x451; void*x452; SEL x453; void*x454; SEL x455; void*x456; void*x457; void*x458; void*x459; void*x460; void*x461; void*x462; SEL x463; void*x464; SEL x465; void*x466; void*x467; void*x468; long x469; void*x470; long x471; void*x472; out void*x473; BOOL x474; void*x475; void*x476; void*x477; void*x478; void*x479; out void*x480; const void*x481; void*x482; void*x483; void*x484; void*x485; void*x486; void*x487; long x488; void*x489; SEL x490; void*x491; SEL x492; void*x493; bool x494; void*x495; void*x496; void*x497; float x498; void*x499; float x500; void*x501; void*x502; void*x503; const void*x504; unsigned long x505; void*x506; out void*x507; void*x508; void*x509; double x510; void*x511; unsigned int x512; void*x513; void*x514; void*x515; void*x516; void*x517; void*x518; void*x519; void*x520; void*x521; void*x522; void*x523; void*x524; void*x525; void*x526; void*x527; struct x528; void*x529; void*x530; void*x531; short x532; void*x533; void*x534; void*x535; const void*x536; void*x537; void*x538; BOOL x539; void*x540; void*x541; void*x542; void*x543; void*x544; bool x545; void*x546; void*x547; void*x548; float x549; void*x550; float x551; void*x552; void*x553; void*x554; const void*x555; unsigned long x556; void*x557; out void*x558; void*x559; void*x560; double x561; void*x562; unsigned int x563; void*x564; void*x565; void*x566; void*x567; void*x568; void*x569; void*x570; void*x571; void*x572; struct x573; void*x574; }*)arg3;
- (void)generate3DBuildingRenderItemsForScene:(id)arg1 withContext:(id)arg2 commandBuffer:(struct CommandBuffer { int (**x1)(); char *x2; unsigned char x3; struct RenderQueue {} *x4; struct ClearItem {} *x5; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_6_1_1; struct RenderItem {} **x_6_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_7_1_1; struct Texture2DLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_8_1_1; struct BufferLoadItem {} *x_8_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_8_1_3; } x8; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_9_1_3; } x9; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned int x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_10_1_3; } x10; id x11; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void x21; out int x22; double x23; char *x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; void x31; out int x32; double x33; char *x34; void*x35; void*x36; void*x37; void*x38; void*x39; void*x40; void x41; out int x42; double x43; char *x44; void*x45; void*x46; void*x47; void*x48; void*x49; void*x50; void x51; out int x52; double x53; char *x54; void*x55; void*x56; void*x57; void*x58; void*x59; void*x60; void x61; out int x62; double x63; char *x64; void*x65; void*x66; void*x67; void*x68; void*x69; void*x70; void x71; out int x72; double x73; char *x74; void*x75; void*x76; void*x77; void*x78; void*x79; void*x80; unsigned short x81; void*x82; unsigned long x83; void*x84; void*x85; void*x86; void*x87; void*x88; void*x89; void*x90; void x91; out int x92; double x93; char *x94; void*x95; void*x96; void*x97; void*x98; void*x99; void*x100; unsigned short x101; void*x102; unsigned long x103; void*x104; void*x105; void*x106; void*x107; void*x108; void*x109; void*x110; void x111; out int x112; double x113; char *x114; void*x115; void*x116; void*x117; void*x118; void*x119; void*x120; void x121; out int x122; double x123; char *x124; void*x125; void*x126; void*x127; void*x128; void*x129; void*x130; void x131; out int x132; double x133; char *x134; void*x135; void*x136; void*x137; void*x138; void*x139; void*x140; long x141; out in void*x142; void*x143; void*x144; void*x145; void*x146; void*x147; void*x148; void*x149; void x150; out int x151; double x152; char *x153; void*x154; void*x155; void*x156; void*x157; void*x158; void*x159; long x160; out in void*x161; void*x162; void*x163; void*x164; void*x165; void*x166; void*x167; void*x168; void x169; out int x170; double x171; char *x172; void*x173; void*x174; void*x175; void*x176; void*x177; void*x178; out void*x179; void*x180; void*x181; void x182; out int x183; double x184; char *x185; void*x186; void*x187; void*x188; void*x189; void*x190; void*x191; bool x192; bycopy bycopy unsigned long x193; void*x194; void*x195; void*x196; void*x197; void*x198; void*x199; void*x200; void x201; out int x202; double x203; char *x204; void*x205; void*x206; void*x207; void*x208; void*x209; void*x210; void x211; out int x212; double x213; char *x214; void*x215; void*x216; void*x217; void*x218; void*x219; void*x220; void x221; out int x222; double x223; char *x224; void*x225; void*x226; void*x227; void*x228; void*x229; void*x230; void x231; out int x232; double x233; char *x234; void*x235; void*x236; void*x237; void*x238; void*x239; void*x240; void x241; out int x242; double x243; char *x244; void*x245; void*x246; void*x247; void*x248; void*x249; void*x250; out void*x251; void*x252; void*x253; void x254; out int x255; double x256; char *x257; void*x258; void*x259; void*x260; void*x261; void*x262; void*x263; BOOL x264; out in short x265; void*x266; void*x267; void x268; out int x269; double x270; char *x271; void*x272; void*x273; void*x274; void*x275; void*x276; void*x277; void x278; out int x279; double x280; char *x281; void*x282; void*x283; void*x284; void*x285; void*x286; void*x287; void x288; out int x289; double x290; char *x291; void*x292; void*x293; void*x294; void*x295; void*x296; void*x297; void x298; out int x299; double x300; char *x301; void*x302; void*x303; void*x304; void*x305; void*x306; void*x307; void x308; out int x309; double x310; char *x311; void*x312; void*x313; void*x314; void*x315; void*x316; void*x317; void x318; out int x319; double x320; char *x321; void*x322; void*x323; void*x324; void*x325; void*x326; void*x327; void x328; out int x329; double x330; char *x331; void*x332; void*x333; void*x334; void*x335; void*x336; void*x337; long x338; out in void*x339; void*x340; void*x341; void*x342; void*x343; void*x344; void*x345; void*x346; void x347; out int x348; double x349; char *x350; void*x351; void*x352; void*x353; void*x354; void*x355; void*x356; unsigned short x357; void*x358; unsigned long x359; void*x360; void*x361; void*x362; void*x363; short x364; void*x365; void*x366; void*x367; const void*x368; void*x369; void*x370; BOOL x371; void*x372; void*x373; void*x374; void*x375; void*x376; void x377; void*x378; void*x379; void*x380; BOOL x381; void*x382; void*x383; void*x384; out void*x385; const void*x386; void*x387; void*x388; void*x389; void*x390; void*x391; void*x392; long x393; void*x394; SEL x395; void*x396; SEL x397; void*x398; void*x399; void*x400; void*x401; void*x402; in void*x403; double x404; void*x405; void*x406; void*x407; const void*x408; unsigned int x409; void*x410; void*x411; void*x412; void*x413; void*x414; void*x415; void*x416; void*x417; void*x418; char *x419; void*x420; void*x421; void*x422; void*x423; void*x424; short x425; void*x426; void*x427; void*x428; double x429; void*x430; SEL x431; void*x432; SEL x433; void*x434; void*x435; void*x436; void*x437; void*x438; void*x439; void*x440; SEL x441; void*x442; SEL x443; void*x444; void*x445; void*x446; long x447; void*x448; long x449; void*x450; out void*x451; BOOL x452; void*x453; void*x454; void*x455; void*x456; void*x457; out void*x458; const void*x459; void*x460; void*x461; void*x462; void*x463; void*x464; void*x465; long x466; void*x467; SEL x468; void*x469; SEL x470; void*x471; void*x472; void*x473; void*x474; void*x475; in void*x476; double x477; void*x478; void*x479; void*x480; const void*x481; unsigned int x482; void*x483; void*x484; void*x485; void*x486; void*x487; void*x488; void*x489; void*x490; void*x491; char *x492; void*x493; void*x494; void*x495; void*x496; void*x497; void*x498; void*x499; void*x500; void*x501; struct x502; void*x503; void*x504; void*x505; short x506; void*x507; void*x508; void*x509; const void*x510; void*x511; void*x512; BOOL x513; void*x514; void*x515; void*x516; void*x517; void*x518; void*x519; void*x520; void*x521; void*x522; in void*x523; double x524; void*x525; void*x526; void*x527; const void*x528; unsigned int x529; void*x530; void*x531; void*x532; void*x533; void*x534; void*x535; void*x536; void*x537; void*x538; struct x539; void*x540; }*)arg3;
- (void)generate3DBuildingRenderItemsIfNecessaryForScene:(id)arg1 withContext:(id)arg2 commandBuffer:(struct CommandBuffer { int (**x1)(); char *x2; unsigned char x3; struct RenderQueue {} *x4; struct ClearItem {} *x5; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_6_1_1; struct RenderItem {} **x_6_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_7_1_1; struct Texture2DLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_8_1_1; struct BufferLoadItem {} *x_8_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_8_1_3; } x8; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_9_1_3; } x9; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned int x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_10_1_3; } x10; id x11; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; int x23; void*x24; in void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; void*x35; void*x36; void*x37; void*x38; void*x39; void*x40; void*x41; double x42; void*x43; out void*x44; void*x45; void*x46; unsigned int x47/* : ? */; void*x48; long x49; void*x50; void*x51; void*x52; void*x53; void*x54; void*x55; void*x56; void*x57; void*x58; void*x59; void*x60; void*x61; void*x62; void*x63; void*x64; void*x65; void*x66; BOOL x67; void*x68; void*x69; void*x70; void*x71; void*x72; const void*x73; void*x74; void*x75; char *x76; void*x77; void*x78; void*x79; void*x80; void*x81; void*x82; void*x83; void*x84; void*x85; void*x86; void*x87; void*x88; void*x89; void x90; void*x91; out void*x92; int x93; void*x94; double x95; void*x96; char *x97; void*x98; void*x99; void*x100; void*x101; void*x102; void*x103; void*x104; void*x105; void*x106; void*x107; void*x108; void*x109; void*x110; void x111; void*x112; out void*x113; int x114; void*x115; double x116; void*x117; char *x118; void*x119; void*x120; void*x121; void*x122; void*x123; void*x124; void*x125; void*x126; void*x127; void*x128; void*x129; void*x130; void*x131; void x132; void*x133; out void*x134; int x135; void*x136; double x137; void*x138; char *x139; void*x140; void*x141; void*x142; void*x143; void*x144; void*x145; void*x146; void*x147; void*x148; void*x149; void*x150; void*x151; void*x152; void x153; void*x154; out void*x155; int x156; void*x157; double x158; void*x159; char *x160; void*x161; void*x162; void*x163; void*x164; void*x165; void*x166; void*x167; void*x168; void*x169; void*x170; void*x171; void*x172; void*x173; void x174; void*x175; out void*x176; int x177; void*x178; double x179; void*x180; char *x181; void*x182; void*x183; void*x184; void*x185; void*x186; void*x187; void*x188; void*x189; void*x190; void*x191; void*x192; void*x193; void*x194; void x195; void*x196; out void*x197; int x198; void*x199; double x200; void*x201; char *x202; void*x203; void*x204; void*x205; void*x206; void*x207; void*x208; void*x209; void*x210; void*x211; void*x212; void*x213; void*x214; void*x215; void x216; void*x217; out void*x218; int x219; void*x220; double x221; void*x222; void*x223; void*x224; void*x225; void*x226; void*x227; void*x228; void*x229; void*x230; void*x231; void*x232; void*x233; void*x234; void*x235; void*x236; out void*x237; void*x238; void*x239; void*x240; void*x241; void*x242; void*x243; int x244; void*x245; in void*x246; void*x247; void*x248; void*x249; void*x250; void*x251; void*x252; void*x253; void*x254; void*x255; void*x256; void*x257; void*x258; void*x259; void*x260; void*x261; void*x262; double x263; void*x264; out void*x265; void*x266; void*x267; unsigned int x268/* : ? */; void*x269; long x270; void*x271; void*x272; void*x273; void*x274; void*x275; void*x276; void*x277; void*x278; void*x279; void*x280; void*x281; void*x282; void*x283; void*x284; void*x285; void*x286; void*x287; BOOL x288; void*x289; void*x290; void*x291; void*x292; void*x293; const void*x294; void*x295; void*x296; char *x297; void*x298; void*x299; void*x300; void*x301; void*x302; void*x303; void*x304; void*x305; void*x306; void*x307; void*x308; void*x309; void*x310; void x311; void*x312; out void*x313; int x314; void*x315; double x316; void*x317; char *x318; void*x319; void*x320; void*x321; void*x322; void*x323; void*x324; void*x325; void*x326; void*x327; void*x328; void*x329; void*x330; void*x331; void x332; void*x333; out void*x334; int x335; void*x336; double x337; void*x338; char *x339; void*x340; void*x341; void*x342; void*x343; void*x344; void*x345; void*x346; void*x347; void*x348; void*x349; void*x350; void*x351; void*x352; void x353; void*x354; out void*x355; int x356; void*x357; double x358; void*x359; char *x360; void*x361; void*x362; void*x363; void*x364; void*x365; void*x366; void*x367; void*x368; void*x369; void*x370; void*x371; void*x372; void*x373; void x374; void*x375; out void*x376; int x377; void*x378; double x379; void*x380; char *x381; void*x382; void*x383; void*x384; short x385; void*x386; void*x387; void*x388; const void*x389; void*x390; void*x391; BOOL x392; void*x393; void*x394; void*x395; void*x396; void*x397; double x398; void*x399; void*x400; void*x401; long long x402; void*x403; void*x404; void*x405; void*x406; void*x407; void*x408; void*x409; void*x410; void*x411; void*x412; void*x413; out void*x414; SEL x415; void*x416; SEL x417; void*x418; float x419; void*x420; void*x421; void*x422; short x423; void*x424; void*x425; void*x426; void*x427; void*x428; short x429; void*x430; void*x431; void*x432; void*x433; void*x434; const void*x435; void*x436; void*x437; double x438; void*x439; void*x440; void*x441; void*x442; void*x443; void*x444; void*x445; const void*x446; void*x447; void*x448; void*x449; void*x450; void*x451; void*x452; long x453; void*x454; SEL x455; void*x456; SEL x457; void*x458; unsigned long long x459; void*x460; void*x461; void*x462; void*x463; void*x464; const void*x465; void*x466; void*x467; unsigned int x468; void*x469; void*x470; void*x471; void*x472; void*x473; void*x474; void*x475; void*x476; void*x477; void*x478; void*x479; void*x480; void*x481; short x482; void*x483; void*x484; void*x485; double x486; void*x487; SEL x488; void*x489; SEL x490; void*x491; void*x492; void*x493; void*x494; void*x495; void*x496; void*x497; SEL x498; void*x499; SEL x500; void*x501; void*x502; void*x503; long x504; void*x505; long x506; void*x507; out void*x508; BOOL x509; void*x510; void*x511; void*x512; void*x513; void*x514; out void*x515; const void*x516; void*x517; void*x518; void*x519; void*x520; void*x521; void*x522; out void*x523; SEL x524; void*x525; SEL x526; void*x527; float x528; void*x529; void*x530; void*x531; short x532; void*x533; void*x534; void*x535; void*x536; void*x537; short x538; void*x539; void*x540; void*x541; void*x542; void*x543; const void*x544; void*x545; void*x546; double x547; void*x548; void*x549; void*x550; void*x551; void*x552; void*x553; void*x554; const void*x555; void*x556; void*x557; void*x558; void*x559; void*x560; void*x561; long x562; void*x563; SEL x564; void*x565; SEL x566; void*x567; unsigned long long x568; void*x569; void*x570; void*x571; void*x572; void*x573; const void*x574; void*x575; void*x576; unsigned int x577; void*x578; void*x579; void*x580; void*x581; void*x582; void*x583; void*x584; void*x585; void*x586; void*x587; void*x588; void*x589; void*x590; void*x591; void*x592; void*x593; void*x594; void*x595; void*x596; struct x597; void*x598; void*x599; void*x600; short x601; void*x602; void*x603; void*x604; const void*x605; void*x606; void*x607; BOOL x608; void*x609; void*x610; void*x611; void*x612; void*x613; void*x614; void*x615; void*x616; void*x617; short x618; void*x619; void*x620; void*x621; long x622; void*x623; int x624; void*x625; void*x626; void*x627; void*x628; void*x629; unsigned int x630/* : ? */; void*x631; void*x632; void*x633; float x634; void*x635; float x636; void*x637; void*x638; void*x639; const void*x640; void*x641; void*x642; void*x643; void*x644; void*x645; void*x646; out void*x647; SEL x648; void*x649; SEL x650; void*x651; float x652; void*x653; void*x654; void*x655; short x656; void*x657; void*x658; void*x659; void*x660; void*x661; short x662; void*x663; void*x664; void*x665; void*x666; void*x667; const void*x668; void*x669; void*x670; double x671; void*x672; void*x673; void*x674; void*x675; void*x676; void*x677; void*x678; const void*x679; void*x680; void*x681; void*x682; void*x683; void*x684; void*x685; long x686; void*x687; SEL x688; void*x689; SEL x690; void*x691; unsigned long long x692; void*x693; void*x694; void*x695; void*x696; void*x697; const void*x698; void*x699; void*x700; unsigned int x701; void*x702; void*x703; void*x704; void*x705; void*x706; void*x707; void*x708; void*x709; void*x710; void*x711; void*x712; char *x713; void*x714; void*x715; void*x716; void*x717; void*x718; short x719; void*x720; void*x721; void*x722; double x723; void*x724; SEL x725; void*x726; SEL x727; void*x728; void*x729; void*x730; void*x731; void*x732; void*x733; void*x734; SEL x735; void*x736; SEL x737; void*x738; void*x739; void*x740; long x741; void*x742; long x743; void*x744; out void*x745; BOOL x746; void*x747; void*x748; void*x749; void*x750; void*x751; out void*x752; const void*x753; void*x754; void*x755; void*x756; void*x757; void*x758; void*x759; out void*x760; SEL x761; void*x762; SEL x763; void*x764; float x765; void*x766; void*x767; void*x768; short x769; void*x770; void*x771; void*x772; void*x773; void*x774; short x775; void*x776; void*x777; void*x778; void*x779; void*x780; const void*x781; void*x782; void*x783; double x784; void*x785; void*x786; void*x787; void*x788; void*x789; void*x790; void*x791; const void*x792; void*x793; void*x794; void*x795; void*x796; void*x797; void*x798; long x799; void*x800; SEL x801; void*x802; SEL x803; void*x804; unsigned long long x805; void*x806; void*x807; void*x808; void*x809; void*x810; const void*x811; void*x812; void*x813; unsigned int x814; void*x815; void*x816; void*x817; void*x818; void*x819; void*x820; void*x821; void*x822; void*x823; void*x824; void*x825; char *x826; void*x827; void*x828; void*x829; void*x830; void*x831; void*x832; void*x833; void*x834; void*x835; struct x836; void*x837; void*x838; void*x839; short x840; void*x841; void*x842; void*x843; const void*x844; void*x845; void*x846; BOOL x847; void*x848; void*x849; void*x850; void*x851; void*x852; float x853; void*x854; void*x855; void*x856; short x857; void*x858; void*x859; void*x860; void*x861; void*x862; short x863; void*x864; void*x865; void*x866; void*x867; void*x868; const void*x869; void*x870; void*x871; double x872; void*x873; void*x874; void*x875; void*x876; void*x877; void*x878; void*x879; const void*x880; void*x881; void*x882; void*x883; void*x884; void*x885; void*x886; long x887; void*x888; SEL x889; void*x890; SEL x891; void*x892; unsigned long long x893; void*x894; void*x895; void*x896; void*x897; void*x898; const void*x899; void*x900; void*x901; unsigned int x902; void*x903; void*x904; void*x905; void*x906; void*x907; void*x908; void*x909; void*x910; void*x911; void*x912; void*x913; struct x914; void*x915; }*)arg3;
- (void)generateRenderItemsForBuildingShadowsInScene:(id)arg1 withContext:(id)arg2 commandBuffer:(struct CommandBuffer { int (**x1)(); char *x2; unsigned char x3; struct RenderQueue {} *x4; struct ClearItem {} *x5; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_6_1_1; struct RenderItem {} **x_6_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_7_1_1; struct Texture2DLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_8_1_1; struct BufferLoadItem {} *x_8_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_8_1_3; } x8; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_9_1_3; } x9; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned int x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_10_1_3; } x10; id x11; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; long x19; SEL x20; SEL x21; void*x22; void*x23; in double x24; void*x25; const void*x26; const void*x27; in short x28; void*x29; BOOL x30; void*x31; int x32; out in void*x33; void*x34; char *x35; void*x36; void*x37; void*x38; void*x39; struct x40; void*x41; char *x42; char *x43; void*x44; void*x45; void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; void*x52; short x53; void*x54; const void*x55; BOOL x56; void*x57; void*x58; short x59; void*x60; void*x61; const void*x62; double x63; void*x64; void*x65; void*x66; const void*x67; void*x68; void*x69; long x70; SEL x71; SEL x72; void*x73; void*x74; in double x75; void*x76; const void*x77; const void*x78; in short x79; void*x80; BOOL x81; void*x82; int x83; out in void*x84; void*x85; struct x86; void*x87; char *x88; char *x89; void*x90; void*x91; void*x92; void*x93; void*x94; void*x95; void*x96; void*x97; void*x98; short x99; void*x100; const void*x101; BOOL x102; void*x103; void*x104; short x105; void*x106; void*x107; const void*x108; double x109; void*x110; void*x111; void*x112; const void*x113; void*x114; void*x115; long x116; SEL x117; SEL x118; void*x119; void*x120; in double x121; void*x122; const void*x123; const void*x124; in short x125; void*x126; BOOL x127; void*x128; int x129; out in void*x130; void*x131; struct x132; void*x133; char *x134; char *x135; void*x136; void*x137; void*x138; void*x139; void*x140; void*x141; void*x142; void*x143; void*x144; short x145; void*x146; const void*x147; BOOL x148; void*x149; void*x150; void*x151; void*x152; BOOL x153; out void*x154; void*x155; const void*x156; short x157; short x158; void*x159; double x160; void*x161; void*x162; void*x163; int x164; const void*x165; short x166; void*x167; double x168; SEL x169; SEL x170; void*x171; void*x172; void*x173; SEL x174; SEL x175; short x176; void*x177; void*x178; const void*x179; double x180; void*x181; void*x182; void*x183; const void*x184; void*x185; void*x186; long x187; SEL x188; SEL x189; void*x190; void*x191; in double x192; void*x193; const void*x194; const void*x195; in short x196; void*x197; BOOL x198; void*x199; int x200; out in void*x201; void*x202; char *x203; char *x204; void*x205; void*x206; short x207; void*x208; double x209; SEL x210; SEL x211; void*x212; void*x213; void*x214; SEL x215; SEL x216; void*x217; long x218; long x219; out BOOL x220; void*x221; void*x222; out const void*x223; short x224; void*x225; double x226; SEL x227; SEL x228; void*x229; void*x230; void*x231; SEL x232; SEL x233; short x234; void*x235; void*x236; const void*x237; double x238; void*x239; void*x240; void*x241; const void*x242; void*x243; void*x244; long x245; SEL x246; SEL x247; void*x248; void*x249; in double x250; void*x251; const void*x252; const void*x253; in short x254; void*x255; BOOL x256; void*x257; int x258; out in void*x259; void*x260; char *x261; void*x262; void*x263; void*x264; void*x265; struct x266; void*x267; void*x268; void*x269; void*x270; void*x271; void*x272; void*x273; void*x274; void*x275; void*x276; }*)arg3;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue { int (**x1)(); struct shared_ptr<ggl::RenderQueue> { struct RenderQueue {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; }*)arg3;
- (double)heightAtPoint:(struct VKPoint { double x1; double x2; double x3; })arg1;
- (id)heightCache;
- (id)init;
- (id)landmarksModel;
- (unsigned long long)mapLayerPosition;
- (double)maxTileHeightAtPoint:(struct VKPoint { double x1; double x2; double x3; })arg1;
- (void)removePersistingExitingTiles:(id)arg1;
- (void)reset;
- (void)resetPools;
- (void)setActive:(BOOL)arg1;
- (void)setBuildingMode:(int)arg1;
- (void)setBuildingMode:(int)arg1 animated:(BOOL)arg2;
- (void)setDelegate:(id)arg1;
- (void)setFadeTiles:(BOOL)arg1;
- (void)setLandmarksModel:(id)arg1;
- (void)setSkyModel:(id)arg1;
- (void)setStyleManager:(struct shared_ptr<gss::StyleManager> { struct StyleManager {} *x1; struct __shared_weak_count {} *x2; })arg1;
- (void)setVectorType:(int)arg1;
- (id)skyModel;
- (struct shared_ptr<gss::StyleManager> { struct StyleManager {} *x1; struct __shared_weak_count {} *x2; })styleManager;
- (void)stylesheetDidChange;
- (int)vectorType;
- (void)vectorTypeDidChange;
- (BOOL)wantsCategorizedSourceTiles;
- (void)willStartDrawingTiles:(id)arg1;
- (void)willStopDrawingTiles:(id)arg1;

@end
